diff --git a/node_modules/@web3-onboard/core/dist/index.js b/node_modules/@web3-onboard/core/dist/index.js
index 6cf9226..efb265f 100644
--- a/node_modules/@web3-onboard/core/dist/index.js
+++ b/node_modules/@web3-onboard/core/dist/index.js
@@ -1,5 +1,5 @@
 import { ProviderRpcErrorCode, SofiaProRegular } from '@web3-onboard/common';
-import { BehaviorSubject, Subject, defer, firstValueFrom, fromEventPattern } from 'rxjs';
+import { Subject, BehaviorSubject, defer, firstValueFrom, fromEventPattern } from 'rxjs';
 import { distinctUntilKeyChanged, pluck, filter, shareReplay, withLatestFrom, take, takeUntil, share, switchMap, mapTo } from 'rxjs/operators';
 import bowser from 'bowser';
 import Joi from 'joi';
@@ -15,12 +15,10 @@ const ADD_WALLET = 'add_wallet';
 const UPDATE_WALLET = 'update_wallet';
 const REMOVE_WALLET = 'remove_wallet';
 const UPDATE_ACCOUNT = 'update_account';
-const SET_WALLET_MODULES = 'set_wallet_modules';
 
 const APP_INITIAL_STATE = {
-    chains: [],
-    walletModules: [],
-    wallets: []
+    wallets: [],
+    chains: []
 };
 const STORAGE_KEYS = {
     TERMS_AGREEMENT: 'onboard.js:agreement'
@@ -52,17 +50,9 @@ function validEnsChain(chainId) {
 function isSVG(str) {
     return str.includes('<svg');
 }
-function initializeWalletModules(modules, device) {
-    return modules.reduce((acc, walletInit) => {
-        const initialized = walletInit({ device });
-        if (initialized) {
-            // injected wallets is an array of wallets
-            acc.push(...(Array.isArray(initialized) ? initialized : [initialized]));
-        }
-        return acc;
-    }, []);
-}
 
+// observable to log actions or do sideeffects after every state change
+const actions$ = new Subject();
 function reducer(state, action) {
     const { type, payload } = action;
     switch (type) {
@@ -119,12 +109,6 @@ function reducer(state, action) {
                 wallets: updatedWallets
             };
         }
-        case SET_WALLET_MODULES: {
-            return {
-                ...state,
-                walletModules: payload
-            };
-        }
         case RESET_STORE:
             return APP_INITIAL_STATE;
         default:
@@ -136,6 +120,7 @@ const _stateUpdates = new Subject();
 _stateUpdates.subscribe(_store);
 function dispatch$1(action) {
     const state = _store.getValue();
+    actions$.next({ action, state });
     _stateUpdates.next(reducer(state, action));
 }
 function select(stateKey) {
@@ -1099,9 +1084,9 @@ Joi.object({
     getInfo: Joi.function().arity(1).required(),
     getInterface: Joi.function().arity(1).required()
 });
-const walletInit = Joi.array().items(Joi.function()).required();
+const walletModules = Joi.array().items(Joi.function()).required();
 const initOptions = Joi.object({
-    wallets: walletInit,
+    wallets: walletModules,
     chains: chains.required(),
     appMetadata: appMetadata,
     i18n: Joi.object().unknown()
@@ -1144,9 +1129,6 @@ function validateString(str) {
 function validateSetChainOptions(data) {
     return validate(setChainOptions, data);
 }
-function validateWalletInit(data) {
-    return validate(walletInit, data);
-}
 
 function addChains(chains) {
     // chains are validated on init
@@ -1216,23 +1198,12 @@ function resetStore() {
     };
     dispatch$1(action);
 }
-function setWalletModules(wallets) {
-    const error = validateWalletInit(wallets);
-    if (error) {
-        throw error;
-    }
-    const modules = initializeWalletModules(wallets, internalState$.getValue().device);
-    const action = {
-        type: SET_WALLET_MODULES,
-        payload: modules
-    };
-    dispatch$1(action);
-}
 
 const reset$ = new Subject();
 const disconnectWallet$ = new Subject();
 const internalState$ = new BehaviorSubject({
     svelteInstance: null,
+    walletModules: [],
     appMetadata: null,
     device: null
 });
@@ -1327,20 +1298,36 @@ function getChainId(provider) {
 function listenAccountsChanged(args) {
     const { provider, disconnected$ } = args;
     const addHandler = (handler) => {
+      if (provider.selectedProvider){
+        provider.selectedProvider.on('accountsChanged', handler)
+      } else {
         provider.on('accountsChanged', handler);
+      }
     };
     const removeHandler = (handler) => {
+      if (provider.selectedProvider){
+        provider.selectProvider.removeListener('accountsChanged', handler)
+      } else {
         provider.removeListener('accountsChanged', handler);
+      }
     };
     return fromEventPattern(addHandler, removeHandler).pipe(takeUntil(disconnected$));
 }
 function listenChainChanged(args) {
     const { provider, disconnected$ } = args;
     const addHandler = (handler) => {
+      if (provider.selectedProvider){
+        provider.selectedProvider.on('chainChanged', handler)
+      } else {
         provider.on('chainChanged', handler);
+      }
     };
     const removeHandler = (handler) => {
+      if (provider.selectedProvider){
+        provider.selectedProvider.removeListener('chainChanged', handler)
+      } else {
         provider.removeListener('chainChanged', handler);
+      }
     };
     return fromEventPattern(addHandler, removeHandler).pipe(takeUntil(disconnected$));
 }
@@ -1492,13 +1479,15 @@ async function getBalance(address, chain) {
     }
 }
 function switchChain(provider, chainId) {
-    return provider.request({
+    const activeProvider = provider.selectedProvider || provider
+    return activeProvider.request({
         method: 'wallet_switchEthereumChain',
         params: [{ chainId }]
     });
 }
 function addNewChain(provider, chain) {
-    return provider.request({
+  const activeProvider = provider.selectedProvider || provider
+    return activeProvider.request({
         method: 'wallet_addEthereumChain',
         params: [
             {
@@ -4495,7 +4484,7 @@ function add_css$4(target) {
 	append_styles(target, "svelte-37ahne", ".container.svelte-37ahne{position:relative;display:flex;font-family:var(--onboard-font-family-normal, var(--font-family-normal));line-height:24px;color:var(--onboard-gray-700, var(--gray-700));font-size:var(--onboard-font-size-5, var(--font-size-5));height:var(--onboard-connect-content-height, 440px);overflow:hidden}.content.svelte-37ahne{width:var(--onboard-connect-content-width, 488px);display:flex;flex-direction:column}.scroll-container.svelte-37ahne{overflow-y:auto;transition:opacity 250ms ease-in-out;scrollbar-width:none}.scroll-container.svelte-37ahne::-webkit-scrollbar{display:none}.header.svelte-37ahne{position:relative;display:flex;align-items:center;box-shadow:var(--onboard-shadow-2, var(--shadow-2));background-color:var(\n      --onboard-connect-header-background,\n      var(--onboard-white, var(--white))\n    );color:var(\n      --onboard-connect-header-color,\n      var(--onboard-black, var(--black))\n    );border-radius:0 24px 0 0}.header-heading.svelte-37ahne{margin:var(--onboard-spacing-4, var(--spacing-4));line-height:16px}.button-container.svelte-37ahne{position:absolute;right:var(--onboard-spacing-5, var(--spacing-5));top:var(--onboard-spacing-5, var(--spacing-5))}.disabled.svelte-37ahne{opacity:0.2;pointer-events:none}@media all and (max-width: 520px){.content.svelte-37ahne{width:100%}.container.svelte-37ahne{height:auto;min-height:228px}}");
 }
 
-// (274:0) {#if !autoSelect || (autoSelect && !autoSelect.disableModals)}
+// (273:0) {#if !autoSelect || (autoSelect && !autoSelect.disableModals)}
 function create_if_block$1(ctx) {
 	let modal;
 	let current;
@@ -4540,7 +4529,7 @@ function create_if_block$1(ctx) {
 	};
 }
 
-// (277:6) {#if windowWidth >= 809}
+// (276:6) {#if windowWidth >= 809}
 function create_if_block_6(ctx) {
 	let sidebar;
 	let current;
@@ -4574,7 +4563,7 @@ function create_if_block_6(ctx) {
 	};
 }
 
-// (298:10) {#if step === 'selectingWallet'}
+// (297:10) {#if step === 'selectingWallet'}
 function create_if_block_3(ctx) {
 	let current_block_type_index;
 	let if_block;
@@ -4661,7 +4650,7 @@ function create_if_block_3(ctx) {
 	};
 }
 
-// (310:34) 
+// (309:34) 
 function create_if_block_5(ctx) {
 	let installwallet;
 	let current;
@@ -4691,7 +4680,7 @@ function create_if_block_5(ctx) {
 	};
 }
 
-// (299:12) {#if wallets.length}
+// (298:12) {#if wallets.length}
 function create_if_block_4(ctx) {
 	let agreement;
 	let updating_agreed;
@@ -4778,7 +4767,7 @@ function create_if_block_4(ctx) {
 	};
 }
 
-// (315:10) {#if step === 'connectingWallet' && selectedWallet}
+// (314:10) {#if step === 'connectingWallet' && selectedWallet}
 function create_if_block_2$1(ctx) {
 	let connectingwallet;
 	let current;
@@ -4822,7 +4811,7 @@ function create_if_block_2$1(ctx) {
 	};
 }
 
-// (325:10) {#if step === 'connectedWallet' && selectedWallet}
+// (324:10) {#if step === 'connectedWallet' && selectedWallet}
 function create_if_block_1$1(ctx) {
 	let connectedwallet;
 	let current;
@@ -4861,7 +4850,7 @@ function create_if_block_1$1(ctx) {
 	};
 }
 
-// (275:2) <Modal {close}>
+// (274:2) <Modal {close}>
 function create_default_slot$2(ctx) {
 	let div4;
 	let t0;
@@ -5147,8 +5136,7 @@ function instance$4($$self, $$props, $$invalidate) {
 	let $_;
 	component_subscribe($$self, _, $$value => $$invalidate(10, $_ = $$value));
 	let { autoSelect } = $$props;
-	const { appMetadata } = internalState$.getValue();
-	const { walletModules } = state.get();
+	const { walletModules, appMetadata } = internalState$.getValue();
 	let connectionRejected = false;
 	let wallets = [];
 	let selectedWallet;
@@ -5251,9 +5239,17 @@ function instance$4($$self, $$props, $$invalidate) {
 	async function connectWallet() {
 		$$invalidate(2, connectionRejected = false);
 		const { provider, label } = selectedWallet;
+    const { ethereum } = window
+
+    const selectMetaMask = ethereum && ethereum.providers?.length > 1 && label === 'MetaMask'
+      if (selectMetaMask) { 
+        const selectProvider = ethereum.providers.find((provider) => provider.isMetaMask)
+        provider.selectedProvider = selectProvider
+        ethereum.selectedProvider = selectProvider
+      }
 
 		try {
-			const [address] = await requestAccounts(provider);
+			const [address] = await requestAccounts(selectMetaMask ? provider.selectedProvider : provider);
 
 			// canceled previous request
 			if (!address) {
@@ -6052,13 +6048,7 @@ const API = {
     connectWallet: connect$1,
     disconnectWallet: disconnect,
     setChain,
-    state: {
-        get: state.get,
-        select: state.select,
-        actions: {
-            setWalletModules
-        }
-    }
+    state
 };
 function init(options) {
     if (typeof window === 'undefined')
@@ -6079,13 +6069,21 @@ function init(options) {
         reset$.next();
     }
     const device = getDeviceInfo();
+    const walletModules = wallets.reduce((acc, walletInit) => {
+        const initialized = walletInit({ device });
+        if (initialized) {
+            // injected wallets is an array of wallets
+            acc.push(...(Array.isArray(initialized) ? initialized : [initialized]));
+        }
+        return acc;
+    }, []);
     const app = svelteInstance || mountApp();
     internalState$.next({
         appMetadata,
         svelteInstance: app,
+        walletModules,
         device
     });
-    setWalletModules(wallets);
     return API;
 }
 function mountApp() {
