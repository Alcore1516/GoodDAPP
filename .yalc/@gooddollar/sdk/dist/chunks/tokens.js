import { d as __awaiter, e as __generator, S as SupportedChainId, a7 as G$ContractAddresses, ah as NETWORK_LABELS, ad as Percent, af as JSBI, ai as Trade, ae as CurrencyAmount, a3 as Token, aj as UNISWAP_CONTRACT_ADDRESS, B as BigNumber, b as __spreadArray, a9 as __read, a as __assign, ak as Router, al as Price, am as computePriceImpact, ac as Fraction, ab as Ether } from './addresses.js';
import { U as UnsupportedChainId, a as getChainId, d as debug, I as InvalidChainId, E as ERC20Contract, b as getToken, A as AddressZero, M as MaxUint256, G as G$, c as getAccount, m as memoize_1, e as delayedCacheClear, D as DAI, C as CDAI, f as debugGroupEnd, h as debugGroup, i as UnexpectedToken, j as decimalPercentToPercent, k as g$FromDecimal, F as FUSE, l as decimalToJSBI, n as InsufficientLiquidity, o as UnsupportedToken, p as getTokens } from './apollo.js';
import { i as isTradeBetter, e as allCommonPairs, B as BETTER_TRADE_LESS_HOPS_THRESHOLD, f as getContract, v as v2TradeExactIn, h as cDaiPrice, j as goodMarketMakerContract, Z as ZERO_PERCENT } from './staking.js';
import { D as DEFAULT_DEADLINE_FROM_NOW } from './index.js';

var _format$3="hh-sol-artifact-1";var contractName$3="UBIScheme";var sourceName$3="contracts/ubi/UBIScheme.sol";var abi$4=[{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"account",type:"address"}],name:"ActivatedUser",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"address",name:"previousAdmin",type:"address"},{indexed:false,internalType:"address",name:"newAdmin",type:"address"}],name:"AdminChanged",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"beacon",type:"address"}],name:"BeaconUpgraded",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"uint256",name:"newCycleLength",type:"uint256"}],name:"CycleLengthSet",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"uint256",name:"newDay",type:"uint256"}],name:"DaySet",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"caller",type:"address"},{indexed:true,internalType:"address",name:"fished_account",type:"address"},{indexed:false,internalType:"uint256",name:"claimAmount",type:"uint256"}],name:"InactiveUserFished",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"bool",name:"ShouldWithdrawFromDAO",type:"bool"}],name:"ShouldWithdrawFromDAOSet",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"uint256",name:"total",type:"uint256"}],name:"TotalFished",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"uint256",name:"day",type:"uint256"},{indexed:false,internalType:"uint256",name:"dailyUbi",type:"uint256"},{indexed:false,internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"UBICalculated",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"claimer",type:"address"},{indexed:false,internalType:"uint256",name:"amount",type:"uint256"}],name:"UBIClaimed",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"uint256",name:"day",type:"uint256"},{indexed:false,internalType:"uint256",name:"pool",type:"uint256"},{indexed:false,internalType:"uint256",name:"cycleLength",type:"uint256"},{indexed:false,internalType:"uint256",name:"dailyUBIPool",type:"uint256"}],name:"UBICycleCalculated",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"implementation",type:"address"}],name:"Upgraded",type:"event"},{anonymous:false,inputs:[{indexed:false,internalType:"uint256",name:"prevBalance",type:"uint256"},{indexed:false,internalType:"uint256",name:"newBalance",type:"uint256"}],name:"WithdrawFromDao",type:"event"},{inputs:[],name:"activeUsersCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"avatar",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_member",type:"address"}],name:"checkEntitlement",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"checkEntitlement",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"claim",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"claimDay",outputs:[{internalType:"uint256",name:"amountOfClaimers",type:"uint256"},{internalType:"uint256",name:"claimAmount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"currentCycleLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"currentDay",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"currentDayInCycle",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"cycleLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"dailyCyclePool",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"dailyUBIHistory",outputs:[{internalType:"bool",name:"hasWithdrawn",type:"bool"},{internalType:"uint256",name:"openAmount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"dailyUbi",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"dao",outputs:[{internalType:"contract Controller",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"defaultDailyUbi",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"estimateNextDailyUBI",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"firstClaimPool",outputs:[{internalType:"contract IFirstClaimPool",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_account",type:"address"}],name:"fish",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"_accounts",type:"address[]"}],name:"fishMulti",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"fishedUsersAddresses",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"day",type:"uint256"}],name:"getClaimAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"day",type:"uint256"}],name:"getClaimerCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getDailyStats",outputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"hasClaimed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract INameService",name:"_ns",type:"address"},{internalType:"contract IFirstClaimPool",name:"_firstClaimPool",type:"address"},{internalType:"uint256",name:"_maxInactiveDays",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_account",type:"address"}],name:"isActiveUser",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_account",type:"address"}],name:"isNotNewUser",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"iterationGasLimit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastClaimed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"lastWithdrawDay",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxInactiveDays",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"nameService",outputs:[{internalType:"contract INameService",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"nativeToken",outputs:[{internalType:"contract IGoodDollar",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"periodStart",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_newLength",type:"uint256"}],name:"setCycleLength",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"setDay",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"_shouldWithdraw",type:"bool"}],name:"setShouldWithdrawFromDAO",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"_use",type:"bool"}],name:"setUseFirstClaimPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"shouldWithdrawFromDAO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"startOfCycle",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"totalClaimsPerUser",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"updateAvatar",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newImplementation",type:"address"}],name:"upgradeTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newImplementation",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"upgradeToAndCall",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"useFirstClaimPool",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}];var bytecode$4="0x60a06040523060601b60805234801561001757600080fd5b5060805160601c612b8161004b60003960008181610d7201528181610db2015281816111ef015261122f0152612b816000f3fe6080604052600436106102025760003560e01c8063013eba9214610207578063069786ea146102475780630ce82d67146102715780631099da4f146102865780631248b1011461029c5780631794bb3c146102d35780631a787f2e146102f55780631b3c90a8146103155780631bbc644c1461032a5780631d8f5ea91461035a57806322b45727146103705780633659cfe6146103865780633d84ceca146103a65780633e6326fc146103c65780634162169f146103f35780634202d21414610413578063456ac1c2146104335780634b4c71801461044d5780634e71d92d146104675780634f1ef2861461047c5780635231e2f01461048f578063560796d1146104bf5780635aef7de6146105105780635c9302c91461053057806373b2e80e14610546578063741470ac146105665780638081cbbd1461057c57806398d6621b1461059c5780639dc2c033146105b1578063a21f698a146105c7578063b656223d146105e7578063ba075410146105fd578063c033abf214610613578063c133750814610629578063c771387014610649578063c7a76adf1461065e578063cc054dfc1461067e578063cef63600146106ab578063d6a9f618146106cb578063d7c4cbb8146106eb578063dddc361614610701578063de1de3a014610716578063e1758bd814610736578063eac471a01461074b578063eda4e6d614610761575b600080fd5b34801561021357600080fd5b50610234610222366004612532565b609b6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561025357600080fd5b5061025c610777565b6040805192835260208301919091520161023e565b34801561027d57600080fd5b506102346107b5565b34801561029257600080fd5b5061023460a95481565b3480156102a857600080fd5b5061025c6102b736600461254f565b609a602052600090815260409020600181015460029091015482565b3480156102df57600080fd5b506102f36102ee366004612568565b6107d8565b005b34801561030157600080fd5b50610234610310366004612532565b610963565b34801561032157600080fd5b506102f3610a9a565b34801561033657600080fd5b5061034a610345366004612532565b610bdf565b604051901515815260200161023e565b34801561036657600080fd5b50610234609e5481565b34801561037c57600080fd5b5061023460a05481565b34801561039257600080fd5b506102f36103a1366004612532565b610d67565b3480156103b257600080fd5b506102f36103c136600461254f565b610e30565b3480156103d257600080fd5b506067546103e6906001600160a01b031681565b60405161023e91906125a9565b3480156103ff57600080fd5b506065546103e6906001600160a01b031681565b34801561041f57600080fd5b5061034a61042e366004612532565b610ece565b34801561043f57600080fd5b5060a35461034a9060ff1681565b34801561045957600080fd5b5060a85461034a9060ff1681565b34801561047357600080fd5b5061034a610f30565b6102f361048a36600461262a565b6111e4565b34801561049b57600080fd5b5061034a6104aa366004612532565b60ac6020526000908152604090205460ff1681565b3480156104cb57600080fd5b506104f96104da36600461254f565b60ab602052600090815260409020805460019091015460ff9091169082565b60408051921515835260208301919091520161023e565b34801561051c57600080fd5b506066546103e6906001600160a01b031681565b34801561053c57600080fd5b50610234609c5481565b34801561055257600080fd5b5061034a610561366004612532565b61129e565b34801561057257600080fd5b5061023460a75481565b34801561058857600080fd5b5060aa546103e6906001600160a01b031681565b3480156105a857600080fd5b506102346112ca565b3480156105bd57600080fd5b5061023460a55481565b3480156105d357600080fd5b5061034a6105e2366004612532565b6112d5565b3480156105f357600080fd5b5061023460a25481565b34801561060957600080fd5b5061023460a65481565b34801561061f57600080fd5b50610234609f5481565b34801561063557600080fd5b506102346106443660046126bc565b6112fb565b34801561065557600080fd5b5061023461149f565b34801561066a57600080fd5b5061023461067936600461254f565b6115a3565b34801561068a57600080fd5b50610234610699366004612532565b60ad6020526000908152604090205481565b3480156106b757600080fd5b506102346106c636600461254f565b6115b8565b3480156106d757600080fd5b506102f36106e636600461277b565b6115cd565b3480156106f757600080fd5b5061023460a15481565b34801561070d57600080fd5b506102f36115e8565b34801561072257600080fd5b506102f361073136600461277b565b611647565b34801561074257600080fd5b506103e6611696565b34801561075757600080fd5b5061023460a45481565b34801561076d57600080fd5b50610234609d5481565b600080600062015180609d544261078e91906127ae565b61079891906127c5565b90506107a3816115a3565b6107ac826115b8565b92509250509091565b60006201518060a654426107c991906127ae565b6107d391906127c5565b905090565b600054610100900460ff16806107f1575060005460ff16155b6108595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561087b576000805461ffff19166101011790555b600082116108cb5760405162461bcd60e51b815260206004820181905260248201527f4d617820696e61637469766520646179732063616e6e6f74206265207a65726f6044820152606401610850565b6108d48461172d565b60a282905560aa80546001600160a01b0319166001600160a01b03851617905560a3805460ff19169055605a60a455620249f0609f5561091762015180426127c5565b61092490620151806127e7565b6109309061a8c0612806565b609d81905560a65560a8805460ff1916600117905561138860a955801561095d576000805461ff00191690555b50505050565b6000609d5442101561097757506000919050565b60a85460ff1680156109b1575061098d826112d5565b15806109b157506001600160a01b038216600090815260ac602052604090205460ff165b15610a425760aa60009054906101000a90046001600160a01b03166001600160a01b031663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c919061281e565b92915050565b62015180609d5442610a5491906127ae565b610a5e91906127c5565b609c54148015610a7057506000609e54115b15610a9257610a7e8261129e565b610a8a57609e54610a3c565b600092915050565b610a3c61149f565b60675460405163bf40fac160e01b815260206004820152600a60248201526921a7a72a2927a62622a960b11b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190612837565b606580546001600160a01b0319166001600160a01b0392909216918217905560408051632d77bef360e11b81529051635aef7de691600480820192602092909190829003018186803b158015610b8557600080fd5b505afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190612837565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600080609d54118015610bf45750609d544210155b610c105760405162461bcd60e51b815260040161085090612854565b610c19826112d5565b8015610c2b5750610c2982610ece565b155b610c715760405162461bcd60e51b815260206004820152601760248201527634b9903737ba1030b71034b730b1ba34bb32903ab9b2b960491b6044820152606401610850565b6001600160a01b038216600090815260ac602052604090205460ff1615610ccb5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e48199a5cda195960921b6044820152606401610850565b6001600160a01b038216600090815260ac60205260408120805460ff19166001179055610cf6611750565b9050600160a06000828254610d0b91906127ae565b90915550610d1e905033826000806119f3565b6040518181526001600160a01b0384169033907f3c91d315d82534112f8ce552cb79133a14191077a2d715fd65cabd026fc27c749060200160405180910390a350600192915050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610db05760405162461bcd60e51b815260040161085090612882565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610de2611ca8565b6001600160a01b031614610e085760405162461bcd60e51b8152600401610850906128bc565b610e1181611cc4565b60408051600080825260208201909252610e2d91839190611ccc565b50565b610e38611e0c565b60008111610e925760405162461bcd60e51b815260206004820152602160248201527f6379636c65206d757374206265206174206c65617374203120646179206c6f6e6044820152606760f81b6064820152608401610850565b60a48190556040518181527fa61e6cca2c12e2a0a493683acfe95b034f0f50d793434f4dfe3ba06ea201f344906020015b60405180910390a150565b6001600160a01b0381166000908152609b6020526040812054610ef0836112d5565b15610f2757600062015180610f0583426127ae565b610f0f91906127c5565b905060a254811015610f25575060019392505050565b505b50600092915050565b600080609d54118015610f455750609d544210155b610f615760405162461bcd60e51b815260040161085090612854565b60675460405163bf40fac160e01b81526020600482015260086024820152674944454e5449545960c01b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190612837565b6001600160a01b0316633af32abf336040518263ffffffff1660e01b815260040161102091906125a9565b60206040518083038186803b15801561103857600080fd5b505afa15801561104c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107091906128f6565b6110b95760405162461bcd60e51b815260206004820152601a60248201527915509254d8da195b594e881b9bdd081dda1a5d195b1a5cdd195960321b6044820152606401610850565b60006110c433611ee0565b60675460405163bf40fac160e01b815260206004820152600d60248201526c4744414f5f434c41494d45525360981b60448201529192506000916001600160a01b039091169063bf40fac19060640160206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612837565b905081801561117a57506001600160a01b03811615155b156111de5760405163748abee960e11b81526001600160a01b0382169063e9157dd2906111ab9033906004016125a9565b600060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050505b50905090565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561122d5760405162461bcd60e51b815260040161085090612882565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661125f611ca8565b6001600160a01b0316146112855760405162461bcd60e51b8152600401610850906128bc565b61128e82611cc4565b61129a82826001611ccc565b5050565b609c546000908152609a602090815260408083206001600160a01b039094168352929052205460ff1690565b60006107d333610963565b6001600160a01b0381166000908152609b602052604081205415610a8a57506001919050565b600080609d541180156113105750609d544210155b61132c5760405162461bcd60e51b815260040161085090612854565b60005b825181101561147157609f545a101561136957604051818152600080516020612b2c8339815191529060200160405180910390a192915050565b61138b83828151811061137e5761137e612913565b60200260200101516112d5565b80156113b657506113b48382815181106113a7576113a7612913565b6020026020010151610ece565b155b80156113fc575060ac60008483815181106113d3576113d3612913565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b156114615761142383828151811061141657611416612913565b6020026020010151610bdf565b6114615760405162461bcd60e51b815260206004820152600f60248201526e199a5cda081a185cc819985a5b1959608a1b6044820152606401610850565b61146a81612929565b905061132f565b50600080516020612b2c833981519152825160405161149291815260200190565b60405180910390a1505190565b6000806114aa611696565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114d591906125a9565b60206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061281e565b9050600060a55460a4548361153a91906127c5565b119050600060a5549050600060a7546115516107b5565b10158061155b5750825b156115705760a45461156d90856127c5565b91505b60a0541561158c5760a05461158590836127c5565b905061159b565b60a85460ff1661159b575060a9545b949350505050565b6000908152609a602052604090206001015490565b6000908152609a602052604090206002015490565b6115d5611e0c565b60a8805460ff1916911515919091179055565b600062015180609d54426115fc91906127ae565b61160691906127c5565b9050609c54811115610e2d57609c8190556040518181527f67eb03bd555181f9dd23f546e4331ddfb8b4a7d0c8d261ba44e037f30ce894ea90602001610ec3565b61164f611e0c565b60a3805460ff191682151590811790915560405160ff909116151581527f6cd9a0fd2e006be39a9918bf56c85cae1d4f4599474483ff18cb93355ebaaf8e90602001610ec3565b60675460405163bf40fac160e01b815260206004820152600a60248201526923a7a7a22227a62620a960b11b60448201526000916001600160a01b03169063bf40fac19060640160206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190612837565b606780546001600160a01b0319166001600160a01b038316179055610e2d610a9a565b600061175a6115e8565b60a154609c5414158061176d5750609e54155b156119ec57600061177c611696565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117ac91906125a9565b60206040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc919061281e565b9050600060a55460a4548361181191906127c5565b11905060a75461181f6107b5565b1015806118295750805b156119415760a35460ff16156118415761184161201c565b6040516370a0823160e01b81526001600160a01b038416906370a082319061186d9030906004016125a9565b60206040518083038186803b15801561188557600080fd5b505afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd919061281e565b915060a454826118cd91906127c5565b60a55560a45460a7556118e2610e10426127c5565b6118ee90610e106127e7565b60a655609c5460a45460a554604080519384526020840186905283019190915260608201527f83e0d535b9e84324e0a25922406398d6ff5f96d0c686204ee490e16d7670566f9060800160405180910390a15b609c5460a1819055600090815260ab6020526040902060a354815460ff191660ff90911615151781556001810183905560a054156119915760a05460a55461198991906127c5565b609e556119a2565b60a85460ff166119a25760a954609e555b609c54609e546040805192835260208301919091524382820152517f836fa39995340265746dfe9587d9fe5c5de35b7bce778afd9b124ce1cfeafdc49181900360600190a1505050505b50609e5490565b81806119fc5750805b15611a8a576001609a6000609c5481526020019081526020016000206001016000828254611a2a9190612806565b9091555050609c546000908152609a602090815260408083206001600160a01b03881684528252808320805460ff19166001908117909155609b835281842042905560ad9092528220805491929091611a84908490612806565b90915550505b8015611b745760aa54604051636bf2228d60e11b81526000916001600160a01b03169063d7e4451a90611ac19088906004016125a9565b602060405180830381600087803b158015611adb57600080fd5b505af1158015611aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b13919061281e565b905080609a6000609c5481526020019081526020016000206002016000828254611b3d9190612806565b90915550506040518181526001600160a01b03861690600080516020612ac58339815191529060200160405180910390a25061095d565b8115611bd057609c546000908152609a602052604081206002018054859290611b9e908490612806565b90915550506040518381526001600160a01b03851690600080516020612ac58339815191529060200160405180910390a25b6000611bda611696565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90611c0b9088908890600401612944565b602060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d91906128f6565b611ca15760405162461bcd60e51b815260206004820152601560248201527418db185a5b481d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610850565b5050505050565b600080516020612ae5833981519152546001600160a01b031690565b610e2d611e0c565b6000611cd6611ca8565b9050611ce18461231f565b600083511180611cee5750815b15611cff57611cfd84846123b2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611ca157805460ff19166001178155604051611d7a908690611d4b9085906024016125a9565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526123b2565b50805460ff19168155611d8b611ca8565b6001600160a01b0316826001600160a01b031614611e035760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610850565b611ca18561249d565b60655460408051632d77bef360e11b8152905133926001600160a01b031691635aef7de6916004808301926020929190829003018186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190612837565b6001600160a01b031614611ede5760405162461bcd60e51b815260206004820181905260248201527f6f6e6c79206176617461722063616e2063616c6c2074686973206d6574686f646044820152606401610850565b565b600080611eeb611750565b9050611ef6836112d5565b8015611f1b57506001600160a01b038316600090815260ac602052604090205460ff16155b8015611f2d5750611f2b8361129e565b155b15611f4957611f408382600160006119f3565b50600192915050565b611f52836112d5565b1580611f7657506001600160a01b038316600090815260ac602052604090205460ff165b15610f2757600160a06000828254611f8e9190612806565b90915550506001600160a01b038316600090815260ac60205260409020805460ff1916905560a85460ff1615611fd157611fcc8360008060016119f3565b611fdf565b611fdf8382600160006119f3565b6040516001600160a01b038416907f2f9cfaa2a5c422dfab45f7d0da071f030fc2d3a7a1f0a255c028eff9b6d3d93690600090a250600192915050565b6000612026611696565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161205691906125a9565b60206040518083038186803b15801561206e57600080fd5b505afa158015612082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a6919061281e565b6066546040516370a0823160e01b81529192506000916001600160a01b03858116926370a08231926120de92909116906004016125a9565b60206040518083038186803b1580156120f657600080fd5b505afa15801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e919061281e565b6065546040519192506001600160a01b03169063d1b7089a9085906121599030908690602401612944565b60408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052606654905160e085901b6001600160e01b03191681526121b49392916001600160a01b0316906000906004016129b5565b600060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261220a91908101906129e9565b50600090506122198284612806565b6040516370a0823160e01b81529091506001600160a01b038516906370a08231906122489030906004016125a9565b60206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612298919061281e565b81146122e05760405162461bcd60e51b8152602060048201526017602482015276111053c81d1c985b9cd9995c881a185cc819985a5b1959604a1b6044820152606401610850565b60408051848152602081018390527f3107ec7eaa50b775d2486c7a394472235804b6fe1c0d4b7bd1d79b09df60f2ba910160405180910390a150505050565b803b6123835760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610850565b600080516020612ae583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6124115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610850565b600080846001600160a01b03168460405161242c9190612a75565b600060405180830381855af49150503d8060008114612467576040519150601f19603f3d011682016040523d82523d6000602084013e61246c565b606091505b50915091506124948282604051806060016040528060278152602001612b05602791396124dd565b95945050505050565b6124a68161231f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606083156124ec575081612516565b8251156124fc5782518084602001fd5b8160405162461bcd60e51b81526004016108509190612a91565b9392505050565b6001600160a01b0381168114610e2d57600080fd5b60006020828403121561254457600080fd5b81356125168161251d565b60006020828403121561256157600080fd5b5035919050565b60008060006060848603121561257d57600080fd5b83356125888161251d565b925060208401356125988161251d565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156125fb576125fb6125bd565b604052919050565b60006001600160401b0382111561261c5761261c6125bd565b50601f01601f191660200190565b6000806040838503121561263d57600080fd5b82356126488161251d565b915060208301356001600160401b0381111561266357600080fd5b8301601f8101851361267457600080fd5b803561268761268282612603565b6125d3565b81815286602083850101111561269c57600080fd5b816020840160208301376000602083830101528093505050509250929050565b600060208083850312156126cf57600080fd5b82356001600160401b03808211156126e657600080fd5b818501915085601f8301126126fa57600080fd5b81358181111561270c5761270c6125bd565b8060051b915061271d8483016125d3565b818152918301840191848101908884111561273757600080fd5b938501935b8385101561276157843592506127518361251d565b828252938501939085019061273c565b98975050505050505050565b8015158114610e2d57600080fd5b60006020828403121561278d57600080fd5b81356125168161276d565b634e487b7160e01b600052601160045260246000fd5b6000828210156127c0576127c0612798565b500390565b6000826127e257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561280157612801612798565b500290565b6000821982111561281957612819612798565b500190565b60006020828403121561283057600080fd5b5051919050565b60006020828403121561284957600080fd5b81516125168161251d565b6020808252601490820152731b9bdd081a5b881c195c9a5bd914dd185c9d195960621b604082015260600190565b6020808252602c90820152600080516020612aa583398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c90820152600080516020612aa583398151915260408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561290857600080fd5b81516125168161276d565b634e487b7160e01b600052603260045260246000fd5b600060001982141561293d5761293d612798565b5060010190565b6001600160a01b03929092168252602082015260400190565b60005b83811015612978578181015183820152602001612960565b8381111561095d5750506000910152565b600081518084526129a181602086016020860161295d565b601f01601f19169290920160200192915050565b600060018060a01b038087168352608060208401526129d76080840187612989565b94166040830152506060015292915050565b600080604083850312156129fc57600080fd5b8251612a078161276d565b60208401519092506001600160401b03811115612a2357600080fd5b8301601f81018513612a3457600080fd5b8051612a4261268282612603565b818152866020838501011115612a5757600080fd5b612a6882602083016020860161295d565b8093505050509250929050565b60008251612a8781846020870161295d565b9190910192915050565b602081526000612516602083018461298956fe46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682089ed24731df6b066e4c5186901fffdba18cd9a10f07494aff900bdee260d1304360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656472b174db45b7e58932cb0c6bf37a7158f40424a078b07677d823cafdb3db540fa264697066735822122082bf04ebcab0326eb0b4d8803888134a4e8b57d83640f929bb9ba3459222c56f64736f6c63430008080033";var deployedBytecode$3="0x6080604052600436106102025760003560e01c8063013eba9214610207578063069786ea146102475780630ce82d67146102715780631099da4f146102865780631248b1011461029c5780631794bb3c146102d35780631a787f2e146102f55780631b3c90a8146103155780631bbc644c1461032a5780631d8f5ea91461035a57806322b45727146103705780633659cfe6146103865780633d84ceca146103a65780633e6326fc146103c65780634162169f146103f35780634202d21414610413578063456ac1c2146104335780634b4c71801461044d5780634e71d92d146104675780634f1ef2861461047c5780635231e2f01461048f578063560796d1146104bf5780635aef7de6146105105780635c9302c91461053057806373b2e80e14610546578063741470ac146105665780638081cbbd1461057c57806398d6621b1461059c5780639dc2c033146105b1578063a21f698a146105c7578063b656223d146105e7578063ba075410146105fd578063c033abf214610613578063c133750814610629578063c771387014610649578063c7a76adf1461065e578063cc054dfc1461067e578063cef63600146106ab578063d6a9f618146106cb578063d7c4cbb8146106eb578063dddc361614610701578063de1de3a014610716578063e1758bd814610736578063eac471a01461074b578063eda4e6d614610761575b600080fd5b34801561021357600080fd5b50610234610222366004612532565b609b6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561025357600080fd5b5061025c610777565b6040805192835260208301919091520161023e565b34801561027d57600080fd5b506102346107b5565b34801561029257600080fd5b5061023460a95481565b3480156102a857600080fd5b5061025c6102b736600461254f565b609a602052600090815260409020600181015460029091015482565b3480156102df57600080fd5b506102f36102ee366004612568565b6107d8565b005b34801561030157600080fd5b50610234610310366004612532565b610963565b34801561032157600080fd5b506102f3610a9a565b34801561033657600080fd5b5061034a610345366004612532565b610bdf565b604051901515815260200161023e565b34801561036657600080fd5b50610234609e5481565b34801561037c57600080fd5b5061023460a05481565b34801561039257600080fd5b506102f36103a1366004612532565b610d67565b3480156103b257600080fd5b506102f36103c136600461254f565b610e30565b3480156103d257600080fd5b506067546103e6906001600160a01b031681565b60405161023e91906125a9565b3480156103ff57600080fd5b506065546103e6906001600160a01b031681565b34801561041f57600080fd5b5061034a61042e366004612532565b610ece565b34801561043f57600080fd5b5060a35461034a9060ff1681565b34801561045957600080fd5b5060a85461034a9060ff1681565b34801561047357600080fd5b5061034a610f30565b6102f361048a36600461262a565b6111e4565b34801561049b57600080fd5b5061034a6104aa366004612532565b60ac6020526000908152604090205460ff1681565b3480156104cb57600080fd5b506104f96104da36600461254f565b60ab602052600090815260409020805460019091015460ff9091169082565b60408051921515835260208301919091520161023e565b34801561051c57600080fd5b506066546103e6906001600160a01b031681565b34801561053c57600080fd5b50610234609c5481565b34801561055257600080fd5b5061034a610561366004612532565b61129e565b34801561057257600080fd5b5061023460a75481565b34801561058857600080fd5b5060aa546103e6906001600160a01b031681565b3480156105a857600080fd5b506102346112ca565b3480156105bd57600080fd5b5061023460a55481565b3480156105d357600080fd5b5061034a6105e2366004612532565b6112d5565b3480156105f357600080fd5b5061023460a25481565b34801561060957600080fd5b5061023460a65481565b34801561061f57600080fd5b50610234609f5481565b34801561063557600080fd5b506102346106443660046126bc565b6112fb565b34801561065557600080fd5b5061023461149f565b34801561066a57600080fd5b5061023461067936600461254f565b6115a3565b34801561068a57600080fd5b50610234610699366004612532565b60ad6020526000908152604090205481565b3480156106b757600080fd5b506102346106c636600461254f565b6115b8565b3480156106d757600080fd5b506102f36106e636600461277b565b6115cd565b3480156106f757600080fd5b5061023460a15481565b34801561070d57600080fd5b506102f36115e8565b34801561072257600080fd5b506102f361073136600461277b565b611647565b34801561074257600080fd5b506103e6611696565b34801561075757600080fd5b5061023460a45481565b34801561076d57600080fd5b50610234609d5481565b600080600062015180609d544261078e91906127ae565b61079891906127c5565b90506107a3816115a3565b6107ac826115b8565b92509250509091565b60006201518060a654426107c991906127ae565b6107d391906127c5565b905090565b600054610100900460ff16806107f1575060005460ff16155b6108595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561087b576000805461ffff19166101011790555b600082116108cb5760405162461bcd60e51b815260206004820181905260248201527f4d617820696e61637469766520646179732063616e6e6f74206265207a65726f6044820152606401610850565b6108d48461172d565b60a282905560aa80546001600160a01b0319166001600160a01b03851617905560a3805460ff19169055605a60a455620249f0609f5561091762015180426127c5565b61092490620151806127e7565b6109309061a8c0612806565b609d81905560a65560a8805460ff1916600117905561138860a955801561095d576000805461ff00191690555b50505050565b6000609d5442101561097757506000919050565b60a85460ff1680156109b1575061098d826112d5565b15806109b157506001600160a01b038216600090815260ac602052604090205460ff165b15610a425760aa60009054906101000a90046001600160a01b03166001600160a01b031663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c919061281e565b92915050565b62015180609d5442610a5491906127ae565b610a5e91906127c5565b609c54148015610a7057506000609e54115b15610a9257610a7e8261129e565b610a8a57609e54610a3c565b600092915050565b610a3c61149f565b60675460405163bf40fac160e01b815260206004820152600a60248201526921a7a72a2927a62622a960b11b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190612837565b606580546001600160a01b0319166001600160a01b0392909216918217905560408051632d77bef360e11b81529051635aef7de691600480820192602092909190829003018186803b158015610b8557600080fd5b505afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190612837565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600080609d54118015610bf45750609d544210155b610c105760405162461bcd60e51b815260040161085090612854565b610c19826112d5565b8015610c2b5750610c2982610ece565b155b610c715760405162461bcd60e51b815260206004820152601760248201527634b9903737ba1030b71034b730b1ba34bb32903ab9b2b960491b6044820152606401610850565b6001600160a01b038216600090815260ac602052604090205460ff1615610ccb5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e48199a5cda195960921b6044820152606401610850565b6001600160a01b038216600090815260ac60205260408120805460ff19166001179055610cf6611750565b9050600160a06000828254610d0b91906127ae565b90915550610d1e905033826000806119f3565b6040518181526001600160a01b0384169033907f3c91d315d82534112f8ce552cb79133a14191077a2d715fd65cabd026fc27c749060200160405180910390a350600192915050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610db05760405162461bcd60e51b815260040161085090612882565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610de2611ca8565b6001600160a01b031614610e085760405162461bcd60e51b8152600401610850906128bc565b610e1181611cc4565b60408051600080825260208201909252610e2d91839190611ccc565b50565b610e38611e0c565b60008111610e925760405162461bcd60e51b815260206004820152602160248201527f6379636c65206d757374206265206174206c65617374203120646179206c6f6e6044820152606760f81b6064820152608401610850565b60a48190556040518181527fa61e6cca2c12e2a0a493683acfe95b034f0f50d793434f4dfe3ba06ea201f344906020015b60405180910390a150565b6001600160a01b0381166000908152609b6020526040812054610ef0836112d5565b15610f2757600062015180610f0583426127ae565b610f0f91906127c5565b905060a254811015610f25575060019392505050565b505b50600092915050565b600080609d54118015610f455750609d544210155b610f615760405162461bcd60e51b815260040161085090612854565b60675460405163bf40fac160e01b81526020600482015260086024820152674944454e5449545960c01b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190612837565b6001600160a01b0316633af32abf336040518263ffffffff1660e01b815260040161102091906125a9565b60206040518083038186803b15801561103857600080fd5b505afa15801561104c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107091906128f6565b6110b95760405162461bcd60e51b815260206004820152601a60248201527915509254d8da195b594e881b9bdd081dda1a5d195b1a5cdd195960321b6044820152606401610850565b60006110c433611ee0565b60675460405163bf40fac160e01b815260206004820152600d60248201526c4744414f5f434c41494d45525360981b60448201529192506000916001600160a01b039091169063bf40fac19060640160206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612837565b905081801561117a57506001600160a01b03811615155b156111de5760405163748abee960e11b81526001600160a01b0382169063e9157dd2906111ab9033906004016125a9565b600060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050505b50905090565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561122d5760405162461bcd60e51b815260040161085090612882565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661125f611ca8565b6001600160a01b0316146112855760405162461bcd60e51b8152600401610850906128bc565b61128e82611cc4565b61129a82826001611ccc565b5050565b609c546000908152609a602090815260408083206001600160a01b039094168352929052205460ff1690565b60006107d333610963565b6001600160a01b0381166000908152609b602052604081205415610a8a57506001919050565b600080609d541180156113105750609d544210155b61132c5760405162461bcd60e51b815260040161085090612854565b60005b825181101561147157609f545a101561136957604051818152600080516020612b2c8339815191529060200160405180910390a192915050565b61138b83828151811061137e5761137e612913565b60200260200101516112d5565b80156113b657506113b48382815181106113a7576113a7612913565b6020026020010151610ece565b155b80156113fc575060ac60008483815181106113d3576113d3612913565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b156114615761142383828151811061141657611416612913565b6020026020010151610bdf565b6114615760405162461bcd60e51b815260206004820152600f60248201526e199a5cda081a185cc819985a5b1959608a1b6044820152606401610850565b61146a81612929565b905061132f565b50600080516020612b2c833981519152825160405161149291815260200190565b60405180910390a1505190565b6000806114aa611696565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114d591906125a9565b60206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061281e565b9050600060a55460a4548361153a91906127c5565b119050600060a5549050600060a7546115516107b5565b10158061155b5750825b156115705760a45461156d90856127c5565b91505b60a0541561158c5760a05461158590836127c5565b905061159b565b60a85460ff1661159b575060a9545b949350505050565b6000908152609a602052604090206001015490565b6000908152609a602052604090206002015490565b6115d5611e0c565b60a8805460ff1916911515919091179055565b600062015180609d54426115fc91906127ae565b61160691906127c5565b9050609c54811115610e2d57609c8190556040518181527f67eb03bd555181f9dd23f546e4331ddfb8b4a7d0c8d261ba44e037f30ce894ea90602001610ec3565b61164f611e0c565b60a3805460ff191682151590811790915560405160ff909116151581527f6cd9a0fd2e006be39a9918bf56c85cae1d4f4599474483ff18cb93355ebaaf8e90602001610ec3565b60675460405163bf40fac160e01b815260206004820152600a60248201526923a7a7a22227a62620a960b11b60448201526000916001600160a01b03169063bf40fac19060640160206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190612837565b606780546001600160a01b0319166001600160a01b038316179055610e2d610a9a565b600061175a6115e8565b60a154609c5414158061176d5750609e54155b156119ec57600061177c611696565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117ac91906125a9565b60206040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc919061281e565b9050600060a55460a4548361181191906127c5565b11905060a75461181f6107b5565b1015806118295750805b156119415760a35460ff16156118415761184161201c565b6040516370a0823160e01b81526001600160a01b038416906370a082319061186d9030906004016125a9565b60206040518083038186803b15801561188557600080fd5b505afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd919061281e565b915060a454826118cd91906127c5565b60a55560a45460a7556118e2610e10426127c5565b6118ee90610e106127e7565b60a655609c5460a45460a554604080519384526020840186905283019190915260608201527f83e0d535b9e84324e0a25922406398d6ff5f96d0c686204ee490e16d7670566f9060800160405180910390a15b609c5460a1819055600090815260ab6020526040902060a354815460ff191660ff90911615151781556001810183905560a054156119915760a05460a55461198991906127c5565b609e556119a2565b60a85460ff166119a25760a954609e555b609c54609e546040805192835260208301919091524382820152517f836fa39995340265746dfe9587d9fe5c5de35b7bce778afd9b124ce1cfeafdc49181900360600190a1505050505b50609e5490565b81806119fc5750805b15611a8a576001609a6000609c5481526020019081526020016000206001016000828254611a2a9190612806565b9091555050609c546000908152609a602090815260408083206001600160a01b03881684528252808320805460ff19166001908117909155609b835281842042905560ad9092528220805491929091611a84908490612806565b90915550505b8015611b745760aa54604051636bf2228d60e11b81526000916001600160a01b03169063d7e4451a90611ac19088906004016125a9565b602060405180830381600087803b158015611adb57600080fd5b505af1158015611aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b13919061281e565b905080609a6000609c5481526020019081526020016000206002016000828254611b3d9190612806565b90915550506040518181526001600160a01b03861690600080516020612ac58339815191529060200160405180910390a25061095d565b8115611bd057609c546000908152609a602052604081206002018054859290611b9e908490612806565b90915550506040518381526001600160a01b03851690600080516020612ac58339815191529060200160405180910390a25b6000611bda611696565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90611c0b9088908890600401612944565b602060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d91906128f6565b611ca15760405162461bcd60e51b815260206004820152601560248201527418db185a5b481d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610850565b5050505050565b600080516020612ae5833981519152546001600160a01b031690565b610e2d611e0c565b6000611cd6611ca8565b9050611ce18461231f565b600083511180611cee5750815b15611cff57611cfd84846123b2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611ca157805460ff19166001178155604051611d7a908690611d4b9085906024016125a9565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526123b2565b50805460ff19168155611d8b611ca8565b6001600160a01b0316826001600160a01b031614611e035760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610850565b611ca18561249d565b60655460408051632d77bef360e11b8152905133926001600160a01b031691635aef7de6916004808301926020929190829003018186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190612837565b6001600160a01b031614611ede5760405162461bcd60e51b815260206004820181905260248201527f6f6e6c79206176617461722063616e2063616c6c2074686973206d6574686f646044820152606401610850565b565b600080611eeb611750565b9050611ef6836112d5565b8015611f1b57506001600160a01b038316600090815260ac602052604090205460ff16155b8015611f2d5750611f2b8361129e565b155b15611f4957611f408382600160006119f3565b50600192915050565b611f52836112d5565b1580611f7657506001600160a01b038316600090815260ac602052604090205460ff165b15610f2757600160a06000828254611f8e9190612806565b90915550506001600160a01b038316600090815260ac60205260409020805460ff1916905560a85460ff1615611fd157611fcc8360008060016119f3565b611fdf565b611fdf8382600160006119f3565b6040516001600160a01b038416907f2f9cfaa2a5c422dfab45f7d0da071f030fc2d3a7a1f0a255c028eff9b6d3d93690600090a250600192915050565b6000612026611696565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161205691906125a9565b60206040518083038186803b15801561206e57600080fd5b505afa158015612082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a6919061281e565b6066546040516370a0823160e01b81529192506000916001600160a01b03858116926370a08231926120de92909116906004016125a9565b60206040518083038186803b1580156120f657600080fd5b505afa15801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e919061281e565b6065546040519192506001600160a01b03169063d1b7089a9085906121599030908690602401612944565b60408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052606654905160e085901b6001600160e01b03191681526121b49392916001600160a01b0316906000906004016129b5565b600060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261220a91908101906129e9565b50600090506122198284612806565b6040516370a0823160e01b81529091506001600160a01b038516906370a08231906122489030906004016125a9565b60206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612298919061281e565b81146122e05760405162461bcd60e51b8152602060048201526017602482015276111053c81d1c985b9cd9995c881a185cc819985a5b1959604a1b6044820152606401610850565b60408051848152602081018390527f3107ec7eaa50b775d2486c7a394472235804b6fe1c0d4b7bd1d79b09df60f2ba910160405180910390a150505050565b803b6123835760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610850565b600080516020612ae583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6124115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610850565b600080846001600160a01b03168460405161242c9190612a75565b600060405180830381855af49150503d8060008114612467576040519150601f19603f3d011682016040523d82523d6000602084013e61246c565b606091505b50915091506124948282604051806060016040528060278152602001612b05602791396124dd565b95945050505050565b6124a68161231f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606083156124ec575081612516565b8251156124fc5782518084602001fd5b8160405162461bcd60e51b81526004016108509190612a91565b9392505050565b6001600160a01b0381168114610e2d57600080fd5b60006020828403121561254457600080fd5b81356125168161251d565b60006020828403121561256157600080fd5b5035919050565b60008060006060848603121561257d57600080fd5b83356125888161251d565b925060208401356125988161251d565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156125fb576125fb6125bd565b604052919050565b60006001600160401b0382111561261c5761261c6125bd565b50601f01601f191660200190565b6000806040838503121561263d57600080fd5b82356126488161251d565b915060208301356001600160401b0381111561266357600080fd5b8301601f8101851361267457600080fd5b803561268761268282612603565b6125d3565b81815286602083850101111561269c57600080fd5b816020840160208301376000602083830101528093505050509250929050565b600060208083850312156126cf57600080fd5b82356001600160401b03808211156126e657600080fd5b818501915085601f8301126126fa57600080fd5b81358181111561270c5761270c6125bd565b8060051b915061271d8483016125d3565b818152918301840191848101908884111561273757600080fd5b938501935b8385101561276157843592506127518361251d565b828252938501939085019061273c565b98975050505050505050565b8015158114610e2d57600080fd5b60006020828403121561278d57600080fd5b81356125168161276d565b634e487b7160e01b600052601160045260246000fd5b6000828210156127c0576127c0612798565b500390565b6000826127e257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561280157612801612798565b500290565b6000821982111561281957612819612798565b500190565b60006020828403121561283057600080fd5b5051919050565b60006020828403121561284957600080fd5b81516125168161251d565b6020808252601490820152731b9bdd081a5b881c195c9a5bd914dd185c9d195960621b604082015260600190565b6020808252602c90820152600080516020612aa583398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c90820152600080516020612aa583398151915260408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561290857600080fd5b81516125168161276d565b634e487b7160e01b600052603260045260246000fd5b600060001982141561293d5761293d612798565b5060010190565b6001600160a01b03929092168252602082015260400190565b60005b83811015612978578181015183820152602001612960565b8381111561095d5750506000910152565b600081518084526129a181602086016020860161295d565b601f01601f19169290920160200192915050565b600060018060a01b038087168352608060208401526129d76080840187612989565b94166040830152506060015292915050565b600080604083850312156129fc57600080fd5b8251612a078161276d565b60208401519092506001600160401b03811115612a2357600080fd5b8301601f81018513612a3457600080fd5b8051612a4261268282612603565b818152866020838501011115612a5757600080fd5b612a6882602083016020860161295d565b8093505050509250929050565b60008251612a8781846020870161295d565b9190910192915050565b602081526000612516602083018461298956fe46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682089ed24731df6b066e4c5186901fffdba18cd9a10f07494aff900bdee260d1304360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656472b174db45b7e58932cb0c6bf37a7158f40424a078b07677d823cafdb3db540fa264697066735822122082bf04ebcab0326eb0b4d8803888134a4e8b57d83640f929bb9ba3459222c56f64736f6c63430008080033";var linkReferences$3={};var deployedLinkReferences$3={};var UBIScheme = {_format:_format$3,contractName:contractName$3,sourceName:sourceName$3,abi:abi$4,bytecode:bytecode$4,deployedBytecode:deployedBytecode$3,linkReferences:linkReferences$3,deployedLinkReferences:deployedLinkReferences$3};

/**
 * Returns instance of UBIScheme contract.
 * @param {Web3} web3 Web3 instance.
 * @param {string?} address Deployed contract address in given chain ID.
 * @constructor
 */
function ubiSchemeContract(web3, address) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    if (chainId !== SupportedChainId.FUSE) {
                        throw new UnsupportedChainId(chainId);
                    }
                    address = address !== null && address !== void 0 ? address : G$ContractAddresses(chainId, 'UBIScheme');
                    return [2 /*return*/, new web3.eth.Contract(UBIScheme.abi, address)];
            }
        });
    });
}

var _format$2="hh-sol-artifact-1";var contractName$2="IIdentity";var sourceName$2="contracts/Interfaces.sol";var abi$3=[{anonymous:false,inputs:[{indexed:false,internalType:"address",name:"user",type:"address"}],name:"WhitelistedAdded",type:"event"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"addIdentityAdmin",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"string",name:"did",type:"string"}],name:"addWhitelistedWithDID",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"isIdentityAdmin",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"isWhitelisted",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"removeWhitelisted",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_avatar",type:"address"}],name:"setAvatar",outputs:[],stateMutability:"nonpayable",type:"function"}];var bytecode$3="0x";var deployedBytecode$2="0x";var linkReferences$2={};var deployedLinkReferences$2={};var Identity = {_format:_format$2,contractName:contractName$2,sourceName:sourceName$2,abi:abi$3,bytecode:bytecode$3,deployedBytecode:deployedBytecode$2,linkReferences:linkReferences$2,deployedLinkReferences:deployedLinkReferences$2};

/**
 * Returns instance of IdentityContract contract.
 * @param {Web3} web3 Web3 instance.
 * @param {string?} address Deployed contract address in given chain ID.
 * @constructor
 */
function identityContract(web3, address) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(address !== null && address !== void 0)) return [3 /*break*/, 1];
                    _a = address;
                    return [3 /*break*/, 3];
                case 1:
                    _b = G$ContractAddresses;
                    return [4 /*yield*/, getChainId(web3)];
                case 2:
                    _a = _b.apply(void 0, [_c.sent(), 'Identity']);
                    _c.label = 3;
                case 3:
                    address = _a;
                    return [2 /*return*/, new web3.eth.Contract(Identity.abi, address)];
            }
        });
    });
}

/**
 * Check wallet whitelisted.
 * @param {Web3} web3 Web3 instance.
 * @returns {Promise<boolean>}
 */
function isWhitelisted(web3, account) {
    return __awaiter(this, void 0, void 0, function () {
        var contract, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, identityContract(web3)];
                case 1:
                    contract = _a.sent();
                    return [4 /*yield*/, contract.methods.isWhitelisted(account).call()];
                case 2:
                    result = _a.sent();
                    return [2 /*return*/, result];
            }
        });
    });
}
/**
 * Check UBI token availability.
 * @param {Web3} web3 Web3 instance.
 * @returns {Promise<string>} Amount of UBI tokens.
 */
function check(web3) {
    return __awaiter(this, void 0, void 0, function () {
        var contract, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ubiSchemeContract(web3)];
                case 1:
                    contract = _a.sent();
                    return [4 /*yield*/, contract.methods.checkEntitlement().call()];
                case 2:
                    result = _a.sent();
                    debug('UBI', result.toString());
                    return [2 /*return*/, result.toString()];
            }
        });
    });
}
/**
 * Claim UBI token.
 * @param {Web3} web3 Web3 instance.
 */
function claim(web3, account) {
    return __awaiter(this, void 0, void 0, function () {
        var contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, validateChainId(web3)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, ubiSchemeContract(web3)];
                case 2:
                    contract = _a.sent();
                    return [2 /*return*/, contract.methods.claim().send({ from: account })];
            }
        });
    });
}
/**
 * Validate that selected network is FUSE.
 * @param {Web3} web3 Web3 instance.
 */
function validateChainId(web3) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    if (chainId !== SupportedChainId.FUSE) {
                        throw new InvalidChainId(NETWORK_LABELS[SupportedChainId.FUSE]);
                    }
                    return [2 /*return*/];
            }
        });
    });
}

var _format$1="hh-sol-artifact-1";var contractName$1="ExchangeHelper";var sourceName$1="contracts/reserve/ExchangeHelper.sol";var abi$2=[{anonymous:false,inputs:[{indexed:false,internalType:"address",name:"previousAdmin",type:"address"},{indexed:false,internalType:"address",name:"newAdmin",type:"address"}],name:"AdminChanged",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"beacon",type:"address"}],name:"BeaconUpgraded",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"caller",type:"address"},{indexed:true,internalType:"address",name:"inputToken",type:"address"},{indexed:false,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:false,internalType:"uint256",name:"actualReturn",type:"uint256"},{indexed:true,internalType:"address",name:"receiverAddress",type:"address"}],name:"TokenPurchased",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"caller",type:"address"},{indexed:true,internalType:"address",name:"outputToken",type:"address"},{indexed:false,internalType:"uint256",name:"gdAmount",type:"uint256"},{indexed:false,internalType:"uint256",name:"contributionAmount",type:"uint256"},{indexed:false,internalType:"uint256",name:"actualReturn",type:"uint256"},{indexed:true,internalType:"address",name:"receiverAddress",type:"address"}],name:"TokenSold",type:"event"},{anonymous:false,inputs:[{indexed:true,internalType:"address",name:"implementation",type:"address"}],name:"Upgraded",type:"event"},{inputs:[],name:"avatar",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"_buyPath",type:"address[]"},{internalType:"uint256",name:"_tokenAmount",type:"uint256"},{internalType:"uint256",name:"_minReturn",type:"uint256"},{internalType:"uint256",name:"_minDAIAmount",type:"uint256"},{internalType:"address",name:"_targetAddress",type:"address"}],name:"buy",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[],name:"cDaiAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"daiAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"dao",outputs:[{internalType:"contract Controller",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract INameService",name:"_ns",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nameService",outputs:[{internalType:"contract INameService",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"nativeToken",outputs:[{internalType:"contract IGoodDollar",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"_sellPath",type:"address[]"},{internalType:"uint256",name:"_gdAmount",type:"uint256"},{internalType:"uint256",name:"_minReturn",type:"uint256"},{internalType:"uint256",name:"_minTokenReturn",type:"uint256"},{internalType:"address",name:"_targetAddress",type:"address"}],name:"sell",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"setAddresses",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateAvatar",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newImplementation",type:"address"}],name:"upgradeTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newImplementation",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"upgradeToAndCall",outputs:[],stateMutability:"payable",type:"function"}];var bytecode$2="0x60a06040523060601b60805234801561001757600080fd5b5060805160601c6129d361004b6000396000818161098c015281816109cc01528181610a550152610a9501526129d36000f3fe6080604052600436106100a25760003560e01c806303c40ef4146100a75780631b3c90a8146100cd5780632c387275146100e45780633659cfe6146101115780633e6326fc146101315780634162169f146101515780634f1ef286146101715780635aef7de6146101845780637738fd0b146101a4578063bc3a429b146101c4578063c4d66de8146101d9578063e1758bd8146101f9578063f2c65bf91461020e575b600080fd5b6100ba6100b536600461237a565b61022e565b6040519081526020015b60405180910390f35b3480156100d957600080fd5b506100e261083c565b005b3480156100f057600080fd5b50609b54610104906001600160a01b031681565b6040516100c49190612444565b34801561011d57600080fd5b506100e261012c366004612458565b610981565b34801561013d57600080fd5b50606754610104906001600160a01b031681565b34801561015d57600080fd5b50606554610104906001600160a01b031681565b6100e261017f366004612475565b610a4a565b34801561019057600080fd5b50606654610104906001600160a01b031681565b3480156101b057600080fd5b506100ba6101bf36600461237a565b610b04565b3480156101d057600080fd5b506100e261111d565b3480156101e557600080fd5b506100e26101f4366004612458565b6113e7565b34801561020557600080fd5b506101046114b0565b34801561021a57600080fd5b50609c54610104906001600160a01b031681565b6000609a546002141561025c5760405162461bcd60e51b81526004016102539061251c565b60405180910390fd5b6002609a55855161027f5760405162461bcd60e51b815260040161025390612553565b60675460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906102ae9060040161257f565b60206040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906125a0565b905060006001600160a01b038416156103175783610319565b335b905060006001600160a01b031688600081518110610339576103396125bd565b60200260200101516001600160a01b031614156103ab5760003411801561035f57503487145b6103a65760405162461bcd60e51b81526020600482015260186024820152770f2deea40dccacac840e8de40e0c2f240eed2e8d0408aa8960431b6044820152606401610253565b6105a5565b341561042b5760405162461bcd60e51b815260206004820152604360248201527f5768656e20696e70757420746f6b656e20697320646966666572656e7420746860448201527f616e20455448206d6573736167652076616c75652073686f756c64206265207a60648201526265726f60e81b608482015260a401610253565b8760008151811061043e5761043e6125bd565b60200260200101516001600160a01b03166323b872dd33609c60009054906101000a90046001600160a01b03166001600160a01b03168b600081518110610487576104876125bd565b60200260200101516001600160a01b0316146104a357306104a5565b845b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018a9052606401602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c91906125d3565b15156001146105a5576040805162461bcd60e51b81526020600482015260248101919091527f7472616e7366657246726f6d206661696c65642c206d616b652073757265207960448201527f6f7520617070726f76656420696e70757420746f6b656e207472616e736665726064820152608401610253565b609c5488516000916001600160a01b0316908a9083906105c7576105c76125bd565b60200260200101516001600160a01b03161415610667576040516359a87bc160e01b81526001600160a01b038416906359a87bc19061060e908b908b9087906004016125f5565b602060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190612614565b90506107b1565b609b5489516001600160a01b03909116908a90600090610689576106896125bd565b60200260200101516001600160a01b031614156106ab57610660888884611534565b609b5489516001600160a01b03909116908a906106ca9060019061262d565b815181106106da576106da6125bd565b60200260200101516001600160a01b0316146107445760405162461bcd60e51b8152602060048201526024808201527f54617267657420746f6b656e20696e207468652070617468206d7573742062656044820152632044414960e01b6064820152608401610253565b60006107548a8a896000306118a1565b905060008160018351610767919061262d565b81518110610777576107776125bd565b60200260200101519050600081116107a15760405162461bcd60e51b815260040161025390612652565b6107ac818a86611534565b925050505b816001600160a01b0316896000815181106107ce576107ce6125bd565b60200260200101516001600160a01b0316336001600160a01b03167fcace70a03cbf3e4fa942b0ab9f70aa3834cfab0a31aa75bc4895262063444e128b85604051610823929190918252602082015260400190565b60405180910390a46001609a5598975050505050505050565b60675460405163bf40fac160e01b815260206004820152600a60248201526921a7a72a2927a62622a960b11b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906125a0565b606580546001600160a01b0319166001600160a01b0392909216918217905560408051632d77bef360e11b81529051635aef7de691600480820192602092909190829003018186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f91906125a0565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109ca5760405162461bcd60e51b815260040161025390612680565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109fc611cb7565b6001600160a01b031614610a225760405162461bcd60e51b8152600401610253906126ba565b610a2b81611cd3565b60408051600080825260208201909252610a4791839190611cdb565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a935760405162461bcd60e51b815260040161025390612680565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ac5611cb7565b6001600160a01b031614610aeb5760405162461bcd60e51b8152600401610253906126ba565b610af482611cd3565b610b0082826001611cdb565b5050565b6000609a5460021415610b295760405162461bcd60e51b81526004016102539061251c565b6002609a558551610b4c5760405162461bcd60e51b815260040161025390612553565b60006001600160a01b03831615610b635782610b65565b335b60675460405163bf40fac160e01b8152919250600091829182916001600160a01b039091169063bf40fac190610b9d9060040161257f565b60206040518083038186803b158015610bb557600080fd5b505afa158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed91906125a0565b60675460405163bf40fac160e01b81529192506001600160a01b03169063bf40fac190610c1c906004016126f4565b60206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c91906125a0565b6001600160a01b03166379cc6790338b6040518363ffffffff1660e01b8152600401610c99929190612718565b600060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b50505050806001600160a01b0316634f8f02188a8a8d516001148015610d1d5750609c548e516001600160a01b03909116908f90600090610d0a57610d0a6125bd565b60200260200101516001600160a01b0316145b610d275730610d29565b875b6040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b031660448201523360648201526084016040805180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190612731565b8b5191945092506001148015610e355750609b548a516001600160a01b03909116908b90600090610de857610de86125bd565b60200260200101516001600160a01b03161480610e355750609c548a516001600160a01b03909116908b90600090610e2257610e226125bd565b60200260200101516001600160a01b0316145b15610f6057609b548a516001600160a01b03909116908b90600090610e5c57610e5c6125bd565b60200260200101516001600160a01b03161415610f5b57610e7c83611e22565b925089600081518110610e9157610e916125bd565b60200260200101516001600160a01b031663a9059cbb85856040518363ffffffff1660e01b8152600401610ec6929190612718565b602060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1891906125d3565b1515600114610f5b5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610253565b61108b565b609c548a516001600160a01b03909116908b90600090610f8257610f826125bd565b60200260200101516001600160a01b0316146100a257610fa183611e22565b609b548b519194506001600160a01b0316908b90600090610fc457610fc46125bd565b60200260200101516001600160a01b03161461102e5760405162461bcd60e51b815260206004820152602360248201527f496e70757420746f6b656e20666f7220756e6973776170206d7573742062652060448201526244414960e81b6064820152608401610253565b600061103e8b8560008b896118a1565b9050806001825161104f919061262d565b8151811061105f5761105f6125bd565b60200260200101519350600084116110895760405162461bcd60e51b815260040161025390612652565b505b836001600160a01b03168a60018c516110a4919061262d565b815181106110b4576110b46125bd565b602090810291909101810151604080518d815292830186905282018690526001600160a01b03169033907f067ad67f3f4d17211f9f929d19036c2395bbc9b201d517e46e81f9ceae86032e9060600160405180910390a450506001609a55979650505050505050565b60675460405163bf40fac160e01b815260206004820152600360248201526244414960e81b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac91906125a0565b609b80546001600160a01b0319166001600160a01b0392831617905560675460405163bf40fac160e01b815260206004808301919091526024820152634344414960e01b604482015291169063bf40fac19060640160206040518083038186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125191906125a0565b609c80546001600160a01b0319166001600160a01b03928316908117909155609b5460405163095ea7b360e01b815292169163095ea7b3916112999160001990600401612718565b602060405180830381600087803b1580156112b357600080fd5b505af11580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb91906125d3565b50609b5460675460405163bf40fac160e01b81526001600160a01b039283169263095ea7b392169063bf40fac19061132590600401612755565b60206040518083038186803b15801561133d57600080fd5b505afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137591906125a0565b6000196040518363ffffffff1660e01b8152600401611395929190612718565b602060405180830381600087803b1580156113af57600080fd5b505af11580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4791906125d3565b600054610100900460ff1680611400575060005460ff16155b6114635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610253565b600054610100900460ff16158015611485576000805461ffff19166101011790555b61148e82612007565b61149661111d565b6001609a558015610b00576000805461ff00191690555050565b60675460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906114df906004016126f4565b60206040518083038186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906125a0565b905090565b60675460405163bf40fac160e01b815260009182916001600160a01b039091169063bf40fac1906115679060040161257f565b60206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906125a0565b609c546040516370a0823160e01b81529192506001600160a01b03169060009082906370a08231906115ed903090600401612444565b60206040518083038186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163d9190612614565b60405163140e25ad60e31b8152600481018990529091506000906001600160a01b0384169063a0712d6890602401602060405180830381600087803b15801561168557600080fd5b505af1158015611699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bd9190612614565b905080156117035760405162461bcd60e51b8152602060048201526013602482015272135a5b9d1a5b99c818d1185a4819985a5b1959606a1b6044820152606401610253565b600082846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117329190612444565b60206040518083038186803b15801561174a57600080fd5b505afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190612614565b61178c919061262d565b60405163a9059cbb60e01b81529091506001600160a01b0385169063a9059cbb906117bd9088908590600401612718565b602060405180830381600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f91906125d3565b506040516359a87bc160e01b81526001600160a01b038616906359a87bc1906118409084908c908c906004016125f5565b602060405180830381600087803b15801561185a57600080fd5b505af115801561186e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118929190612614565b955050505050505b9392505050565b60675460405163bf40fac160e01b81526060916000916001600160a01b039091169063bf40fac1906118d590600401612755565b60206040518083038186803b1580156118ed57600080fd5b505afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192591906125a0565b90506000816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561196257600080fd5b505afa158015611976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199a91906125a0565b609b5489519192506060916000916001600160a01b0316908b906119c09060019061262d565b815181106119d0576119d06125bd565b60200260200101516001600160a01b031614905060006001600160a01b03168a600081518110611a0257611a026125bd565b60200260200101516001600160a01b03161415611ad257828a600081518110611a2d57611a2d6125bd565b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b815290851690637ff36ab5908b90611a70908c908f90309042906004016127c1565b6000604051808303818588803b158015611a8957600080fd5b505af1158015611a9d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611ac691908101906127f6565b9450611cae9350505050565b60006001600160a01b03168a60018c51611aec919061262d565b81518110611afc57611afc6125bd565b60200260200101516001600160a01b03161415611bcc57828a60018c51611b23919061262d565b81518110611b3357611b336125bd565b6001600160a01b0392831660209182029290920101526040516318cbafe560e01b8152908516906318cbafe590611b76908c908b908f908c90429060040161287b565b600060405180830381600087803b158015611b9057600080fd5b505af1158015611ba4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ac691908101906127f6565b8015611c6e5789600081518110611be557611be56125bd565b60200260200101516001600160a01b031663095ea7b3858b6040518363ffffffff1660e01b8152600401611c1a929190612718565b602060405180830381600087803b158015611c3457600080fd5b505af1158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c91906125d3565b505b836001600160a01b03166338ed17398a83611c895789611c8b565b8a5b8d8a426040518663ffffffff1660e01b8152600401611b7695949392919061287b565b95945050505050565b600080516020612957833981519152546001600160a01b031690565b610a4761202a565b6000611ce5611cb7565b9050611cf0846120fe565b600083511180611cfd5750815b15611d0e57611d0c8484612191565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611e1b57805460ff19166001178155604051611d89908690611d5a908590602401612444565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612191565b50805460ff19168155611d9a611cb7565b6001600160a01b0316826001600160a01b031614611e125760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610253565b611e1b85612273565b5050505050565b609c54609b546040516370a0823160e01b81526000926001600160a01b03908116921690839082906370a0823190611e5e903090600401612444565b60206040518083038186803b158015611e7657600080fd5b505afa158015611e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eae9190612614565b60405163db006a7560e01b8152600481018790529091506000906001600160a01b0385169063db006a7590602401602060405180830381600087803b158015611ef657600080fd5b505af1158015611f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2e9190612614565b90508015611f735760405162461bcd60e51b815260206004820152601260248201527118d1185a481c995919595b4819985a5b195960721b6044820152606401610253565b600082846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611fa29190612444565b60206040518083038186803b158015611fba57600080fd5b505afa158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff29190612614565b611ffc919061262d565b979650505050505050565b606780546001600160a01b0319166001600160a01b038316179055610a4761083c565b60655460408051632d77bef360e11b8152905133926001600160a01b031691635aef7de6916004808301926020929190829003018186803b15801561206e57600080fd5b505afa158015612082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a691906125a0565b6001600160a01b0316146120fc5760405162461bcd60e51b815260206004820181905260248201527f6f6e6c79206176617461722063616e2063616c6c2074686973206d6574686f646044820152606401610253565b565b803b6121625760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610253565b60008051602061295783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610253565b600080846001600160a01b03168460405161220b91906128e7565b600060405180830381855af49150503d8060008114612246576040519150601f19603f3d011682016040523d82523d6000602084013e61224b565b606091505b5091509150611cae8282604051806060016040528060278152602001612977602791396122b3565b61227c816120fe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606083156122c257508161189a565b8251156122d25782518084602001fd5b8160405162461bcd60e51b81526004016102539190612903565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561232a5761232a6122ec565b604052919050565b60006001600160401b0382111561234b5761234b6122ec565b5060051b60200190565b6001600160a01b0381168114610a4757600080fd5b803561237581612355565b919050565b600080600080600060a0868803121561239257600080fd5b85356001600160401b038111156123a857600080fd5b8601601f810188136123b957600080fd5b803560206123ce6123c983612332565b612302565b82815260059290921b8301810191818101908b8411156123ed57600080fd5b938201935b8385101561241457843561240581612355565b825293820193908201906123f2565b9850508801359550505060408601359250606086013591506124386080870161236a565b90509295509295909350565b6001600160a01b0391909116815260200190565b60006020828403121561246a57600080fd5b813561189a81612355565b6000806040838503121561248857600080fd5b823561249381612355565b91506020838101356001600160401b03808211156124b057600080fd5b818601915086601f8301126124c457600080fd5b8135818111156124d6576124d66122ec565b6124e8601f8201601f19168501612302565b915080825287848285010111156124fe57600080fd5b80848401858401376000848284010152508093505050509250929050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601290820152710a0e4deecd2c8ca40ecc2d8d2c840e0c2e8d60731b604082015260600190565b6020808252600790820152665245534552564560c81b604082015260600190565b6000602082840312156125b257600080fd5b815161189a81612355565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156125e557600080fd5b8151801515811461189a57600080fd5b92835260208301919091526001600160a01b0316604082015260600190565b60006020828403121561262657600080fd5b5051919050565b60008282101561264d57634e487b7160e01b600052601160045260246000fd5b500390565b6020808252601490820152731d1bdad95b881cd95b1b1a5b99c819985a5b195960621b604082015260600190565b6020808252602c9082015260008051602061293783398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061293783398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600a908201526923a7a7a22227a62620a960b11b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000806040838503121561274457600080fd5b505080516020909101519092909150565b6020808252600e908201526d2aa724a9aba0a82fa927aaaa22a960911b604082015260600190565b600081518084526020808501945080840160005b838110156127b65781516001600160a01b031687529582019590820190600101612791565b509495945050505050565b8481526080602082015260006127da608083018661277d565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561280957600080fd5b82516001600160401b0381111561281f57600080fd5b8301601f8101851361283057600080fd5b805161283e6123c982612332565b81815260059190911b8201830190838101908783111561285d57600080fd5b928401925b82841015611ffc57835182529284019290840190612862565b85815284602082015260a06040820152600061289a60a083018661277d565b6001600160a01b0394909416606083015250608001529392505050565b60005b838110156128d25781810151838201526020016128ba565b838111156128e1576000848401525b50505050565b600082516128f98184602087016128b7565b9190910192915050565b60208152600082518060208401526129228160408501602087016128b7565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201430356835f5cd44fd53b1c1adc1820a8ca727e66630a3e679f31cfe1367466e64736f6c63430008080033";var deployedBytecode$1="0x6080604052600436106100a25760003560e01c806303c40ef4146100a75780631b3c90a8146100cd5780632c387275146100e45780633659cfe6146101115780633e6326fc146101315780634162169f146101515780634f1ef286146101715780635aef7de6146101845780637738fd0b146101a4578063bc3a429b146101c4578063c4d66de8146101d9578063e1758bd8146101f9578063f2c65bf91461020e575b600080fd5b6100ba6100b536600461237a565b61022e565b6040519081526020015b60405180910390f35b3480156100d957600080fd5b506100e261083c565b005b3480156100f057600080fd5b50609b54610104906001600160a01b031681565b6040516100c49190612444565b34801561011d57600080fd5b506100e261012c366004612458565b610981565b34801561013d57600080fd5b50606754610104906001600160a01b031681565b34801561015d57600080fd5b50606554610104906001600160a01b031681565b6100e261017f366004612475565b610a4a565b34801561019057600080fd5b50606654610104906001600160a01b031681565b3480156101b057600080fd5b506100ba6101bf36600461237a565b610b04565b3480156101d057600080fd5b506100e261111d565b3480156101e557600080fd5b506100e26101f4366004612458565b6113e7565b34801561020557600080fd5b506101046114b0565b34801561021a57600080fd5b50609c54610104906001600160a01b031681565b6000609a546002141561025c5760405162461bcd60e51b81526004016102539061251c565b60405180910390fd5b6002609a55855161027f5760405162461bcd60e51b815260040161025390612553565b60675460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906102ae9060040161257f565b60206040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906125a0565b905060006001600160a01b038416156103175783610319565b335b905060006001600160a01b031688600081518110610339576103396125bd565b60200260200101516001600160a01b031614156103ab5760003411801561035f57503487145b6103a65760405162461bcd60e51b81526020600482015260186024820152770f2deea40dccacac840e8de40e0c2f240eed2e8d0408aa8960431b6044820152606401610253565b6105a5565b341561042b5760405162461bcd60e51b815260206004820152604360248201527f5768656e20696e70757420746f6b656e20697320646966666572656e7420746860448201527f616e20455448206d6573736167652076616c75652073686f756c64206265207a60648201526265726f60e81b608482015260a401610253565b8760008151811061043e5761043e6125bd565b60200260200101516001600160a01b03166323b872dd33609c60009054906101000a90046001600160a01b03166001600160a01b03168b600081518110610487576104876125bd565b60200260200101516001600160a01b0316146104a357306104a5565b845b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018a9052606401602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c91906125d3565b15156001146105a5576040805162461bcd60e51b81526020600482015260248101919091527f7472616e7366657246726f6d206661696c65642c206d616b652073757265207960448201527f6f7520617070726f76656420696e70757420746f6b656e207472616e736665726064820152608401610253565b609c5488516000916001600160a01b0316908a9083906105c7576105c76125bd565b60200260200101516001600160a01b03161415610667576040516359a87bc160e01b81526001600160a01b038416906359a87bc19061060e908b908b9087906004016125f5565b602060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190612614565b90506107b1565b609b5489516001600160a01b03909116908a90600090610689576106896125bd565b60200260200101516001600160a01b031614156106ab57610660888884611534565b609b5489516001600160a01b03909116908a906106ca9060019061262d565b815181106106da576106da6125bd565b60200260200101516001600160a01b0316146107445760405162461bcd60e51b8152602060048201526024808201527f54617267657420746f6b656e20696e207468652070617468206d7573742062656044820152632044414960e01b6064820152608401610253565b60006107548a8a896000306118a1565b905060008160018351610767919061262d565b81518110610777576107776125bd565b60200260200101519050600081116107a15760405162461bcd60e51b815260040161025390612652565b6107ac818a86611534565b925050505b816001600160a01b0316896000815181106107ce576107ce6125bd565b60200260200101516001600160a01b0316336001600160a01b03167fcace70a03cbf3e4fa942b0ab9f70aa3834cfab0a31aa75bc4895262063444e128b85604051610823929190918252602082015260400190565b60405180910390a46001609a5598975050505050505050565b60675460405163bf40fac160e01b815260206004820152600a60248201526921a7a72a2927a62622a960b11b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906125a0565b606580546001600160a01b0319166001600160a01b0392909216918217905560408051632d77bef360e11b81529051635aef7de691600480820192602092909190829003018186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f91906125a0565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109ca5760405162461bcd60e51b815260040161025390612680565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109fc611cb7565b6001600160a01b031614610a225760405162461bcd60e51b8152600401610253906126ba565b610a2b81611cd3565b60408051600080825260208201909252610a4791839190611cdb565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a935760405162461bcd60e51b815260040161025390612680565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ac5611cb7565b6001600160a01b031614610aeb5760405162461bcd60e51b8152600401610253906126ba565b610af482611cd3565b610b0082826001611cdb565b5050565b6000609a5460021415610b295760405162461bcd60e51b81526004016102539061251c565b6002609a558551610b4c5760405162461bcd60e51b815260040161025390612553565b60006001600160a01b03831615610b635782610b65565b335b60675460405163bf40fac160e01b8152919250600091829182916001600160a01b039091169063bf40fac190610b9d9060040161257f565b60206040518083038186803b158015610bb557600080fd5b505afa158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed91906125a0565b60675460405163bf40fac160e01b81529192506001600160a01b03169063bf40fac190610c1c906004016126f4565b60206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c91906125a0565b6001600160a01b03166379cc6790338b6040518363ffffffff1660e01b8152600401610c99929190612718565b600060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b50505050806001600160a01b0316634f8f02188a8a8d516001148015610d1d5750609c548e516001600160a01b03909116908f90600090610d0a57610d0a6125bd565b60200260200101516001600160a01b0316145b610d275730610d29565b875b6040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b031660448201523360648201526084016040805180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190612731565b8b5191945092506001148015610e355750609b548a516001600160a01b03909116908b90600090610de857610de86125bd565b60200260200101516001600160a01b03161480610e355750609c548a516001600160a01b03909116908b90600090610e2257610e226125bd565b60200260200101516001600160a01b0316145b15610f6057609b548a516001600160a01b03909116908b90600090610e5c57610e5c6125bd565b60200260200101516001600160a01b03161415610f5b57610e7c83611e22565b925089600081518110610e9157610e916125bd565b60200260200101516001600160a01b031663a9059cbb85856040518363ffffffff1660e01b8152600401610ec6929190612718565b602060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1891906125d3565b1515600114610f5b5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610253565b61108b565b609c548a516001600160a01b03909116908b90600090610f8257610f826125bd565b60200260200101516001600160a01b0316146100a257610fa183611e22565b609b548b519194506001600160a01b0316908b90600090610fc457610fc46125bd565b60200260200101516001600160a01b03161461102e5760405162461bcd60e51b815260206004820152602360248201527f496e70757420746f6b656e20666f7220756e6973776170206d7573742062652060448201526244414960e81b6064820152608401610253565b600061103e8b8560008b896118a1565b9050806001825161104f919061262d565b8151811061105f5761105f6125bd565b60200260200101519350600084116110895760405162461bcd60e51b815260040161025390612652565b505b836001600160a01b03168a60018c516110a4919061262d565b815181106110b4576110b46125bd565b602090810291909101810151604080518d815292830186905282018690526001600160a01b03169033907f067ad67f3f4d17211f9f929d19036c2395bbc9b201d517e46e81f9ceae86032e9060600160405180910390a450506001609a55979650505050505050565b60675460405163bf40fac160e01b815260206004820152600360248201526244414960e81b60448201526001600160a01b039091169063bf40fac19060640160206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac91906125a0565b609b80546001600160a01b0319166001600160a01b0392831617905560675460405163bf40fac160e01b815260206004808301919091526024820152634344414960e01b604482015291169063bf40fac19060640160206040518083038186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125191906125a0565b609c80546001600160a01b0319166001600160a01b03928316908117909155609b5460405163095ea7b360e01b815292169163095ea7b3916112999160001990600401612718565b602060405180830381600087803b1580156112b357600080fd5b505af11580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb91906125d3565b50609b5460675460405163bf40fac160e01b81526001600160a01b039283169263095ea7b392169063bf40fac19061132590600401612755565b60206040518083038186803b15801561133d57600080fd5b505afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137591906125a0565b6000196040518363ffffffff1660e01b8152600401611395929190612718565b602060405180830381600087803b1580156113af57600080fd5b505af11580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4791906125d3565b600054610100900460ff1680611400575060005460ff16155b6114635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610253565b600054610100900460ff16158015611485576000805461ffff19166101011790555b61148e82612007565b61149661111d565b6001609a558015610b00576000805461ff00191690555050565b60675460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906114df906004016126f4565b60206040518083038186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906125a0565b905090565b60675460405163bf40fac160e01b815260009182916001600160a01b039091169063bf40fac1906115679060040161257f565b60206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906125a0565b609c546040516370a0823160e01b81529192506001600160a01b03169060009082906370a08231906115ed903090600401612444565b60206040518083038186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163d9190612614565b60405163140e25ad60e31b8152600481018990529091506000906001600160a01b0384169063a0712d6890602401602060405180830381600087803b15801561168557600080fd5b505af1158015611699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bd9190612614565b905080156117035760405162461bcd60e51b8152602060048201526013602482015272135a5b9d1a5b99c818d1185a4819985a5b1959606a1b6044820152606401610253565b600082846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117329190612444565b60206040518083038186803b15801561174a57600080fd5b505afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190612614565b61178c919061262d565b60405163a9059cbb60e01b81529091506001600160a01b0385169063a9059cbb906117bd9088908590600401612718565b602060405180830381600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f91906125d3565b506040516359a87bc160e01b81526001600160a01b038616906359a87bc1906118409084908c908c906004016125f5565b602060405180830381600087803b15801561185a57600080fd5b505af115801561186e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118929190612614565b955050505050505b9392505050565b60675460405163bf40fac160e01b81526060916000916001600160a01b039091169063bf40fac1906118d590600401612755565b60206040518083038186803b1580156118ed57600080fd5b505afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192591906125a0565b90506000816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561196257600080fd5b505afa158015611976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199a91906125a0565b609b5489519192506060916000916001600160a01b0316908b906119c09060019061262d565b815181106119d0576119d06125bd565b60200260200101516001600160a01b031614905060006001600160a01b03168a600081518110611a0257611a026125bd565b60200260200101516001600160a01b03161415611ad257828a600081518110611a2d57611a2d6125bd565b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b815290851690637ff36ab5908b90611a70908c908f90309042906004016127c1565b6000604051808303818588803b158015611a8957600080fd5b505af1158015611a9d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611ac691908101906127f6565b9450611cae9350505050565b60006001600160a01b03168a60018c51611aec919061262d565b81518110611afc57611afc6125bd565b60200260200101516001600160a01b03161415611bcc57828a60018c51611b23919061262d565b81518110611b3357611b336125bd565b6001600160a01b0392831660209182029290920101526040516318cbafe560e01b8152908516906318cbafe590611b76908c908b908f908c90429060040161287b565b600060405180830381600087803b158015611b9057600080fd5b505af1158015611ba4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ac691908101906127f6565b8015611c6e5789600081518110611be557611be56125bd565b60200260200101516001600160a01b031663095ea7b3858b6040518363ffffffff1660e01b8152600401611c1a929190612718565b602060405180830381600087803b158015611c3457600080fd5b505af1158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c91906125d3565b505b836001600160a01b03166338ed17398a83611c895789611c8b565b8a5b8d8a426040518663ffffffff1660e01b8152600401611b7695949392919061287b565b95945050505050565b600080516020612957833981519152546001600160a01b031690565b610a4761202a565b6000611ce5611cb7565b9050611cf0846120fe565b600083511180611cfd5750815b15611d0e57611d0c8484612191565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611e1b57805460ff19166001178155604051611d89908690611d5a908590602401612444565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612191565b50805460ff19168155611d9a611cb7565b6001600160a01b0316826001600160a01b031614611e125760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610253565b611e1b85612273565b5050505050565b609c54609b546040516370a0823160e01b81526000926001600160a01b03908116921690839082906370a0823190611e5e903090600401612444565b60206040518083038186803b158015611e7657600080fd5b505afa158015611e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eae9190612614565b60405163db006a7560e01b8152600481018790529091506000906001600160a01b0385169063db006a7590602401602060405180830381600087803b158015611ef657600080fd5b505af1158015611f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2e9190612614565b90508015611f735760405162461bcd60e51b815260206004820152601260248201527118d1185a481c995919595b4819985a5b195960721b6044820152606401610253565b600082846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611fa29190612444565b60206040518083038186803b158015611fba57600080fd5b505afa158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff29190612614565b611ffc919061262d565b979650505050505050565b606780546001600160a01b0319166001600160a01b038316179055610a4761083c565b60655460408051632d77bef360e11b8152905133926001600160a01b031691635aef7de6916004808301926020929190829003018186803b15801561206e57600080fd5b505afa158015612082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a691906125a0565b6001600160a01b0316146120fc5760405162461bcd60e51b815260206004820181905260248201527f6f6e6c79206176617461722063616e2063616c6c2074686973206d6574686f646044820152606401610253565b565b803b6121625760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610253565b60008051602061295783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610253565b600080846001600160a01b03168460405161220b91906128e7565b600060405180830381855af49150503d8060008114612246576040519150601f19603f3d011682016040523d82523d6000602084013e61224b565b606091505b5091509150611cae8282604051806060016040528060278152602001612977602791396122b3565b61227c816120fe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606083156122c257508161189a565b8251156122d25782518084602001fd5b8160405162461bcd60e51b81526004016102539190612903565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561232a5761232a6122ec565b604052919050565b60006001600160401b0382111561234b5761234b6122ec565b5060051b60200190565b6001600160a01b0381168114610a4757600080fd5b803561237581612355565b919050565b600080600080600060a0868803121561239257600080fd5b85356001600160401b038111156123a857600080fd5b8601601f810188136123b957600080fd5b803560206123ce6123c983612332565b612302565b82815260059290921b8301810191818101908b8411156123ed57600080fd5b938201935b8385101561241457843561240581612355565b825293820193908201906123f2565b9850508801359550505060408601359250606086013591506124386080870161236a565b90509295509295909350565b6001600160a01b0391909116815260200190565b60006020828403121561246a57600080fd5b813561189a81612355565b6000806040838503121561248857600080fd5b823561249381612355565b91506020838101356001600160401b03808211156124b057600080fd5b818601915086601f8301126124c457600080fd5b8135818111156124d6576124d66122ec565b6124e8601f8201601f19168501612302565b915080825287848285010111156124fe57600080fd5b80848401858401376000848284010152508093505050509250929050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601290820152710a0e4deecd2c8ca40ecc2d8d2c840e0c2e8d60731b604082015260600190565b6020808252600790820152665245534552564560c81b604082015260600190565b6000602082840312156125b257600080fd5b815161189a81612355565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156125e557600080fd5b8151801515811461189a57600080fd5b92835260208301919091526001600160a01b0316604082015260600190565b60006020828403121561262657600080fd5b5051919050565b60008282101561264d57634e487b7160e01b600052601160045260246000fd5b500390565b6020808252601490820152731d1bdad95b881cd95b1b1a5b99c819985a5b195960621b604082015260600190565b6020808252602c9082015260008051602061293783398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061293783398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600a908201526923a7a7a22227a62620a960b11b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000806040838503121561274457600080fd5b505080516020909101519092909150565b6020808252600e908201526d2aa724a9aba0a82fa927aaaa22a960911b604082015260600190565b600081518084526020808501945080840160005b838110156127b65781516001600160a01b031687529582019590820190600101612791565b509495945050505050565b8481526080602082015260006127da608083018661277d565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561280957600080fd5b82516001600160401b0381111561281f57600080fd5b8301601f8101851361283057600080fd5b805161283e6123c982612332565b81815260059190911b8201830190838101908783111561285d57600080fd5b928401925b82841015611ffc57835182529284019290840190612862565b85815284602082015260a06040820152600061289a60a083018661277d565b6001600160a01b0394909416606083015250608001529392505050565b60005b838110156128d25781810151838201526020016128ba565b838111156128e1576000848401525b50505050565b600082516128f98184602087016128b7565b9190910192915050565b60208152600082518060208401526129228160408501602087016128b7565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201430356835f5cd44fd53b1c1adc1820a8ca727e66630a3e679f31cfe1367466e64736f6c63430008080033";var linkReferences$1={};var deployedLinkReferences$1={};var ExchangeHelper = {_format:_format$1,contractName:contractName$1,sourceName:sourceName$1,abi:abi$2,bytecode:bytecode$2,deployedBytecode:deployedBytecode$1,linkReferences:linkReferences$1,deployedLinkReferences:deployedLinkReferences$1};

/**
 * Returns instance of ExchangeHelper contract.
 * @param {Web3} web3 Web3 instance.
 * @param {string?} address Deployed contract address in given chain ID.
 * @constructor
 */
function exchangeHelperContract(web3, address) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(address !== null && address !== void 0)) return [3 /*break*/, 1];
                    _a = address;
                    return [3 /*break*/, 3];
                case 1:
                    _b = G$ContractAddresses;
                    return [4 /*yield*/, getChainId(web3)];
                case 2:
                    _a = _b.apply(void 0, [_c.sent(), 'ExchangeHelper']);
                    _c.label = 3;
                case 3:
                    address = _a;
                    return [2 /*return*/, new web3.eth.Contract(ExchangeHelper.abi, address)];
            }
        });
    });
}

var THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));
var ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000));
var INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE);
/**
 * Computes realized lp fee as a percent.
 * @param {Trade} trade Givem trade.
 * @returns {Percent}
 */
function computeRealizedLPFeePercent(trade) {
    // For each hop in our trade, take away the x*y=k price impact from 0.3% fees
    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1 - .03))
    var percent = ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(function (currentFee) { return currentFee.multiply(INPUT_FRACTION_AFTER_FEE); }, ONE_HUNDRED_PERCENT));
    return new Percent(percent.numerator, percent.denominator);
}

var MAX_HOPS = 2;
/**
 * Returns the best trade for the token in to the exact amount of token out.
 * @param {Currency} currencyIn Currency exchange to.
 * @param {CurrencyAmount} currencyAmountOut Currency exchange from
 * @param {number=3} maxHops Maximum hops to find the best exchange route.
 * @param {SupportedChainId} chainId Chain ID.
 * @returns {Promise<Trade>}
 */
function v2TradeExactOut(currencyIn, currencyAmountOut, _a) {
    var _b, _c;
    var _d = _a === void 0 ? {} : _a, _e = _d.maxHops, maxHops = _e === void 0 ? MAX_HOPS : _e, _f = _d.chainId, chainId = _f === void 0 ? SupportedChainId.MAINNET : _f;
    return __awaiter(this, void 0, void 0, function () {
        var allowedPairs, bestTradeSoFar, i, currentTrade;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0: return [4 /*yield*/, allCommonPairs(chainId, currencyIn, currencyAmountOut === null || currencyAmountOut === void 0 ? void 0 : currencyAmountOut.currency)];
                case 1:
                    allowedPairs = _g.sent();
                    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {
                        if (maxHops === 1) {
                            return [2 /*return*/, ((_b = Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0]) !== null && _b !== void 0 ? _b : null)];
                        }
                        bestTradeSoFar = null;
                        for (i = 1; i <= maxHops; i++) {
                            currentTrade = (_c = Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0]) !== null && _c !== void 0 ? _c : null;
                            if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {
                                bestTradeSoFar = currentTrade;
                            }
                        }
                        return [2 /*return*/, bestTradeSoFar];
                    }
                    return [2 /*return*/, null];
            }
        });
    });
}

/**
 * Token or native currency balance for given network.
 * @param {Web3} web3 Web3 instance.
 * @param {Token | string} token Token instance or token's symbol representation in given network.
 * @param {string} account Account address.
 * @returns {Promise<CurrencyAmount>}
 */
function tokenBalance(web3, token, account) {
    return __awaiter(this, void 0, void 0, function () {
        var _token, chainId, _a, _b, _c, _d, _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    if (!(token instanceof Token)) return [3 /*break*/, 1];
                    _token = token;
                    return [3 /*break*/, 4];
                case 1: return [4 /*yield*/, getChainId(web3)];
                case 2:
                    chainId = _g.sent();
                    return [4 /*yield*/, getToken(chainId, token === 'ETH' ? 'WETH' : token)];
                case 3:
                    _token = (_g.sent());
                    _g.label = 4;
                case 4:
                    if (!(_token.symbol === 'ETH')) return [3 /*break*/, 6];
                    _b = (_a = CurrencyAmount).fromRawAmount;
                    _c = [_token];
                    return [4 /*yield*/, web3.eth
                            .getBalance(account)
                            .catch(function (_) { return 0; })
                            .then(function (v) { return v.toString(); })];
                case 5: return [2 /*return*/, _b.apply(_a, _c.concat([_g.sent()]))];
                case 6:
                    _e = (_d = CurrencyAmount).fromRawAmount;
                    _f = [_token];
                    return [4 /*yield*/, ERC20Contract(web3, _token.address)
                            .methods.balanceOf(account)
                            .call()];
                case 7: return [2 /*return*/, _e.apply(_d, _f.concat([_g.sent()]))];
            }
        });
    });
}

var _format="hh-sol-artifact-1";var contractName="ContributionCalc";var sourceName="contracts/reserve/GoodReserveCDai.sol";var abi$1=[{inputs:[{internalType:"contract GoodMarketMaker",name:"_marketMaker",type:"address"},{internalType:"contract GoodReserveCDai",name:"_reserve",type:"address"},{internalType:"address",name:"_contributer",type:"address"},{internalType:"contract ERC20",name:"_token",type:"address"},{internalType:"uint256",name:"_gdAmount",type:"uint256"}],name:"calculateContribution",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_nom",type:"uint256"},{internalType:"uint256",name:"_denom",type:"uint256"}],name:"setContributionRatio",outputs:[],stateMutability:"nonpayable",type:"function"}];var bytecode$1="0x";var deployedBytecode="0x";var linkReferences={};var deployedLinkReferences={};var ContributionCalc = {_format:_format,contractName:contractName,sourceName:sourceName,abi:abi$1,bytecode:bytecode$1,deployedBytecode:deployedBytecode,linkReferences:linkReferences,deployedLinkReferences:deployedLinkReferences};

/**
 * Returns instance of ContributionCalc contract.
 * @param {Web3} web3 Web3 instance.
 * @param {string?} address Deployed contract address in given chain ID.
 * @constructor
 */
function ContributionCalcContract(web3, address) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(address !== null && address !== void 0)) return [3 /*break*/, 1];
                    _a = address;
                    return [3 /*break*/, 3];
                case 1:
                    _b = G$ContractAddresses;
                    return [4 /*yield*/, getChainId(web3)];
                case 2:
                    _a = _b.apply(void 0, [_c.sent(), 'Contribution']);
                    _c.label = 3;
                case 3:
                    address = _a;
                    return [2 /*return*/, new web3.eth.Contract(ContributionCalc.abi, address)];
            }
        });
    });
}

var AZ = AddressZero;
/**
 * Calculated exit contribution for an account.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount} G$Currency Amount of G$Currency account wants to sell.
 * @param {string} account Account's address.
 * @returns {CurrencyAmount} Exit contribution ratio.
 */
function calculateExitContribution(web3, G$Currency, account) {
    return __awaiter(this, void 0, void 0, function () {
        var goodReserveCDai, GDXCurrency, GDXCurrencyAmount, G$CurrencyDiscount, contributionRaw, contribution;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ContributionCalcContract(web3)];
                case 1:
                    goodReserveCDai = _a.sent();
                    debug('G$', G$Currency.toFixed(2));
                    return [4 /*yield*/, tokenBalance(web3, 'GDX', account)];
                case 2:
                    GDXCurrency = _a.sent();
                    GDXCurrencyAmount = CurrencyAmount.fromFractionalAmount(G$Currency.currency, GDXCurrency.numerator, GDXCurrency.denominator);
                    debug('GDX', GDXCurrencyAmount.toFixed(2));
                    G$CurrencyDiscount = G$Currency.subtract(G$Currency.lessThan(GDXCurrencyAmount) ? G$Currency : GDXCurrencyAmount);
                    debug('G$ discount', G$CurrencyDiscount.toFixed(2));
                    if (G$CurrencyDiscount.equalTo(0)) {
                        return [2 /*return*/, CurrencyAmount.fromRawAmount(G$Currency.currency, '0')];
                    }
                    return [4 /*yield*/, goodReserveCDai.methods.calculateContribution(AZ, AZ, AZ, AZ, G$CurrencyDiscount.multiply(G$CurrencyDiscount.decimalScale).toExact()).call()];
                case 3:
                    contributionRaw = _a.sent();
                    contribution = CurrencyAmount.fromRawAmount(G$Currency.currency, contributionRaw.toString());
                    return [2 /*return*/, contribution];
            }
        });
    });
}

var abi=[{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETHSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETHSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}];var evm={bytecode:{linkReferences:{},object:"",opcodes:"",sourceMap:""},deployedBytecode:{immutableReferences:{},linkReferences:{},object:"",opcodes:"",sourceMap:""}};var bytecode="";var Uniswap = {abi:abi,evm:evm,"interface":[{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETHSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETHSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}],bytecode:bytecode};

// CONVENTION isFoo -> boolean
/**
 * Returns true if the string value is zero in hex
 * @param hexNumberString
 */
function isZero(hexNumberString) {
    return /^0x0*$/.test(hexNumberString);
}

/**
 * Builds swap call arguments for the contract
 * @param {Web3} web3 Web3 instance.
 * @param {Trade<Currency, Currency, TradeType>} trade Calculated trade.
 * @param {Percent} allowedSlippage Slippage in percent.
 * @param {number} [deadline=DEFAULT_DEADLINE_FROM_NOW] Deadline in seconds.
 */
function swapCallArguments(web3, trade, // trade to execute, required
allowedSlippage, deadline // in seconds from now
) {
    if (deadline === void 0) { deadline = DEFAULT_DEADLINE_FROM_NOW; }
    return __awaiter(this, void 0, void 0, function () {
        var account;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getAccount(web3)];
                case 1:
                    account = _a.sent();
                    return [2 /*return*/, Router.swapCallParameters(trade, {
                            feeOnTransfer: false,
                            allowedSlippage: allowedSlippage,
                            recipient: account,
                            ttl: deadline
                        })];
            }
        });
    });
}
/**
 * Approve token spend for buy.
 * @param {Web3} web3 Web3 instance.
 * @param {Trade<Currency, Currency, TradeType>} trade Calculated trade.
 */
function approveBuy(web3, trade) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, contract, contractDeploymentAddress, input, allowance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (trade.route.path[0].isNative) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getAccount(web3)];
                case 2:
                    account = _a.sent();
                    contract = ERC20Contract(web3, trade.route.path[0].address);
                    contractDeploymentAddress = UNISWAP_CONTRACT_ADDRESS[chainId];
                    input = BigNumber.from(trade.inputAmount.multiply(trade.inputAmount.decimalScale).toFixed(0));
                    return [4 /*yield*/, contract.methods
                            .allowance(account, contractDeploymentAddress)
                            .call()
                            .then(function (_) { return BigNumber.from(_); })];
                case 3:
                    allowance = _a.sent();
                    if (input.lte(allowance))
                        return [2 /*return*/];
                    return [4 /*yield*/, contract.methods.approve(contractDeploymentAddress, MaxUint256.toString()).send({ from: account })];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Approve token spend for sell.
 * @param {Web3} web3 Web3 instance.
 * @param {Trade<Currency, Currency, TradeType>} trade Calculated trade.
 */
function approveSell(web3, trade) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, contract, contractDeploymentAddress, input, allowance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getAccount(web3)];
                case 2:
                    account = _a.sent();
                    contract = ERC20Contract(web3, G$[chainId].address);
                    contractDeploymentAddress = UNISWAP_CONTRACT_ADDRESS[chainId];
                    input = BigNumber.from(trade.inputAmount.multiply(trade.inputAmount.decimalScale).toFixed(0));
                    return [4 /*yield*/, contract.methods
                            .allowance(account, contractDeploymentAddress)
                            .call()
                            .then(function (_) { return BigNumber.from(_); })];
                case 3:
                    allowance = _a.sent();
                    if (input.lte(allowance))
                        return [2 /*return*/];
                    return [4 /*yield*/, contract.methods.approve(contractDeploymentAddress, MaxUint256.toString()).send({ from: account })];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 *
 * @param {Web3} web3 Web3 instance.
 * @param {Trade<Currency, Currency, TradeType>} trade Calculated trade.
 * @param {Web3} web3 Web3 instance.
 * @param {Trade<Currency, Currency, TradeType>} trade Calculated trade.
 * @param {Percent} allowedSlippage Slippage in percent.
 * @param {Function} onSent On sent event.
 * @param {number} [deadline=DEFAULT_DEADLINE_FROM_NOW] Deadline in seconds.
 */
function swap(web3, trade, // trade to execute, required
allowedSlippage, // in bips
onSent, deadline // in seconds from now
) {
    if (deadline === void 0) { deadline = DEFAULT_DEADLINE_FROM_NOW; }
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, contract, parameters, methodName, args, value, req;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _b.sent();
                    return [4 /*yield*/, getAccount(web3)];
                case 2:
                    account = _b.sent();
                    return [4 /*yield*/, fuseUniswapContract(web3)];
                case 3:
                    contract = _b.sent();
                    return [4 /*yield*/, swapCallArguments(web3, trade, allowedSlippage, deadline)];
                case 4:
                    parameters = _b.sent();
                    methodName = parameters.methodName, args = parameters.args, value = parameters.value;
                    req = (_a = contract.methods)[methodName].apply(_a, __spreadArray([], __read(args), false)).send(__assign(__assign({}, (chainId === SupportedChainId.FUSE && { gasPrice: 1000000000 })), (value && !isZero(value) ? { value: value, from: account } : { from: account })));
                    if (onSent)
                        req.on('transactionHash', function (hash) { return onSent(hash, account); });
                    return [2 /*return*/, req];
            }
        });
    });
}
/**
 * Returns instance of uniswap on fuse contract.
 * @param {Web3} web3 Web3 instance.
 * @param {string} address Deployed contract address in given chain ID.
 * @constructor
 */
function fuseUniswapContract(web3, address) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    address = address !== null && address !== void 0 ? address : UNISWAP_CONTRACT_ADDRESS[chainId];
                    return [2 /*return*/, new web3.eth.Contract(Uniswap.abi, address)];
            }
        });
    });
}

/**
 * Calculates cDAI -> DAI ratio.
 * @param {Web3} web3 Web3 instance.
 * @param {number} chainId Chain ID for cache.
 * @returns {Fraction} Ratio.
 */
var g$ReservePrice = memoize_1(function (web3, chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var contract, _a, cdaiPrice, daiPrice, priceAsDAI, priceAscDAI;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                contract = getContract(chainId, 'GoodReserveCDai', ['function currentPrice() view returns (uint256)', 'function currentPriceDAI() view returns (uint256)'], web3);
                return [4 /*yield*/, Promise.all([contract.currentPrice(), contract.currentPriceDAI()])];
            case 1:
                _a = __read.apply(void 0, [_b.sent(), 2]), cdaiPrice = _a[0], daiPrice = _a[1];
                delayedCacheClear(g$ReservePrice);
                priceAsDAI = new Price(DAI[chainId], G$[chainId], daiPrice, 100);
                priceAscDAI = new Price(CDAI[chainId], G$[chainId], cdaiPrice, 100);
                return [2 /*return*/, { DAI: priceAsDAI, cDAI: priceAscDAI }];
        }
    });
}); }, function (_, chainId) { return chainId; });

/**
 * Tries to convert token DAI into X. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} DAI DAI token amount.
 * @param {Currency} to Token X to convert to.
 * @param {Percent} slippageTolerance Slippage tolerance.
 * @returns {DAIResult | null}
 */
function DaiToXExactIn(web3, DAI, to, slippageTolerance) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, trade, amount, minAmount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    debugGroup("DAI to ".concat(to.symbol));
                    return [4 /*yield*/, v2TradeExactIn(DAI, to, { chainId: chainId })];
                case 2:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("DAI to ".concat(to.symbol));
                        return [2 /*return*/, null];
                    }
                    amount = trade.outputAmount;
                    debug(DAI.currency.symbol, amount.toSignificant(6));
                    minAmount = trade.minimumAmountOut(slippageTolerance);
                    debug("".concat(to.symbol, " min"), minAmount.toSignificant(6));
                    debugGroupEnd("DAI to ".concat(to.symbol));
                    return [2 /*return*/, { amount: amount, minAmount: minAmount, route: trade.route.path, trade: trade }];
            }
        });
    });
}
/**
 * Tries get amount of token DAI from X. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {Currency} DAI DAI token amount.
 * @param {CurrencyAmount<Currency>} to Token X to convert to.
 * @returns {DAIResult | null}
 */
function DaiToXExactOut(web3, DAI, to) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, trade;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    debugGroup("DAI to ".concat(to.currency.symbol));
                    return [4 /*yield*/, v2TradeExactOut(DAI, to, { chainId: chainId })];
                case 2:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("DAI to ".concat(to.currency.symbol));
                        return [2 /*return*/, null];
                    }
                    debug(DAI.symbol, trade.inputAmount.toSignificant(6));
                    debugGroupEnd("DAI to ".concat(to.currency.symbol));
                    return [2 /*return*/, trade.inputAmount];
            }
        });
    });
}
/**
 * Tries to convert token G$ into X. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency G$ token amount.
 * @param {Currency} to Token X to convert to.
 * @param {Percent} slippageTolerance Slippage tolerance.
 * @returns {DAIResult | null}
 */
function G$ToXExactIn(web3, currency, to, slippageTolerance) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, trade, amount, minAmount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    debugGroup("G$ to ".concat(to.symbol));
                    return [4 /*yield*/, v2TradeExactIn(currency, to, { chainId: chainId })];
                case 2:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("G$ to ".concat(to.symbol));
                        return [2 /*return*/, null];
                    }
                    amount = trade.outputAmount;
                    debug(to.symbol, amount.toSignificant(6));
                    minAmount = trade.minimumAmountOut(slippageTolerance);
                    debug("".concat(to.symbol, " min"), minAmount.toSignificant(6));
                    debugGroupEnd("G$ to ".concat(to.symbol));
                    return [2 /*return*/, { amount: amount, minAmount: minAmount, route: trade.route.path, trade: trade }];
            }
        });
    });
}
/**
 * Tries get amount of token G$ from X. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {Currency} G$ G$ token amount.
 * @param {CurrencyAmount<Currency>} to Token X to convert to.
 * @returns {DAIResult | null}
 */
function G$ToXExactOut(web3, G$, to) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, trade;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    debugGroup("G$ to ".concat(to.currency.symbol));
                    return [4 /*yield*/, v2TradeExactOut(G$, to, { chainId: chainId })];
                case 2:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("G$ to ".concat(to.currency.symbol));
                        return [2 /*return*/, null];
                    }
                    debug(to.currency.symbol, trade.inputAmount.toSignificant(6));
                    debugGroupEnd("G$ to ".concat(to.currency.symbol));
                    return [2 /*return*/, trade.inputAmount];
            }
        });
    });
}
/**
 * Tries to convert token cDAI into DAI.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency CDAI token amount.
 * @returns {CurrencyAmount<Currency>}
 * @throws {UnexpectedToken} If currency not DAI.
 */
function cDaiToDai(web3, currency) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, DAI, cDaiPriceRatio, _daiAmount, amount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (currency.currency.symbol !== 'cDAI') {
                        throw new UnexpectedToken(currency.currency.symbol);
                    }
                    return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getToken(chainId, 'DAI')];
                case 2:
                    DAI = (_a.sent());
                    return [4 /*yield*/, cDaiPrice(web3, chainId)];
                case 3:
                    cDaiPriceRatio = _a.sent();
                    debug('cDAI ratio', cDaiPriceRatio.toSignificant(6));
                    _daiAmount = currency.multiply(cDaiPriceRatio).multiply(1e10);
                    amount = CurrencyAmount.fromFractionalAmount(DAI, _daiAmount.numerator, _daiAmount.denominator);
                    debug('cDAI', amount.toSignificant(6));
                    return [2 /*return*/, amount];
            }
        });
    });
}
/**
 * Tries to convert token G$ into cDAI.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency G$ token amount.
 * @param {Percent} slippageTolerance Slippage tolerance.
 * @returns {CDAIResult}
 * @throws {UnexpectedToken} If currency not cDAI.
 */
function G$ToCDai(web3, currency, slippageTolerance) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, goodMarketMaker, bigNumber, _cDaiOutput, amount, minAmount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (currency.currency.symbol !== 'G$') {
                        throw new UnexpectedToken(currency.currency.symbol);
                    }
                    return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, goodMarketMakerContract(web3)];
                case 2:
                    goodMarketMaker = _a.sent();
                    bigNumber = currency.multiply(currency.decimalScale).toFixed(0);
                    return [4 /*yield*/, goodMarketMaker.methods.sellReturn(CDAI[chainId].address, bigNumber).call()];
                case 3:
                    _cDaiOutput = _a.sent();
                    amount = CurrencyAmount.fromRawAmount(CDAI[chainId], _cDaiOutput.toString());
                    debug('cDAI', amount.toSignificant(6));
                    minAmount = amount.subtract(amount.multiply(slippageTolerance));
                    debug('cDAI min', minAmount.toSignificant(6));
                    return [2 /*return*/, { amount: amount, minAmount: minAmount }];
            }
        });
    });
}
/**
 * Calculates liquidity fee and price impact on uniswap.
 * @param {Trade<Currency, Currency, TradeType>} trade Trade returned by uniswap.
 * @returns {{ liquidityFee: CurrencyAmount<Currency>, priceImpact: Percent }}
 */
function realizedLPFeePriceImpact(trade) {
    var realizedLpFeePercent = computeRealizedLPFeePercent(trade);
    var priceImpact = trade.priceImpact.subtract(realizedLpFeePercent);
    var liquidityFee = trade.inputAmount.multiply(realizedLpFeePercent);
    debug('Price impact', priceImpact.toSignificant(6));
    debug('Liquidity fee', liquidityFee.toSignificant(6));
    return { liquidityFee: liquidityFee, priceImpact: priceImpact };
}
/**
 * Returns trade information for selling G$.
 * @param {Web3} web3 Web3 instance.
 * @param {string} toSymbol Symbol of the token that you want to get while selling G$.
 * @param {number | string} amount Amount of given currency.
 * @param {number} slippageTolerance Slippage tolerance while exchange tokens.
 */
function getMeta$1(web3, toSymbol, amount, slippageTolerance) {
    if (slippageTolerance === void 0) { slippageTolerance = 0.5; }
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, G$, TO, DAI, DAIAmount, cDAIAmount, inputAmount, outputAmount, outputCDAIValue, minimumOutputAmount, route, trade, priceImpact, liquidityFee, GDXBalance, contribution, slippageTolerancePercent, g$trade, inputWithoutContribution, daiTrade, price;
        var _a, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _e.sent();
                    return [4 /*yield*/, getAccount(web3)];
                case 2:
                    account = _e.sent();
                    return [4 /*yield*/, getToken(chainId, 'G$')];
                case 3:
                    G$ = _e.sent();
                    if (!G$) {
                        throw new Error('Unsupported chain ID');
                    }
                    if (!(toSymbol === 'ETH')) return [3 /*break*/, 4];
                    TO = Ether.onChain(chainId);
                    return [3 /*break*/, 7];
                case 4:
                    if (!(toSymbol === 'FUSE')) return [3 /*break*/, 5];
                    TO = FUSE;
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, getToken(chainId, toSymbol)];
                case 6:
                    TO = (_e.sent());
                    _e.label = 7;
                case 7:
                    if (!TO) {
                        throw new Error('Unsupported token');
                    }
                    return [4 /*yield*/, getToken(chainId, 'DAI')];
                case 8:
                    DAI = (_e.sent());
                    DAIAmount = null;
                    cDAIAmount = null;
                    return [4 /*yield*/, g$FromDecimal(chainId, amount)];
                case 9:
                    inputAmount = _e.sent();
                    trade = null;
                    priceImpact = new Fraction(0);
                    liquidityFee = CurrencyAmount.fromRawAmount(G$, '0');
                    GDXBalance = new Fraction(0);
                    contribution = CurrencyAmount.fromRawAmount(G$, '0');
                    slippageTolerancePercent = decimalPercentToPercent(slippageTolerance);
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 11];
                    return [4 /*yield*/, G$ToXExactIn(web3, inputAmount, TO, slippageTolerancePercent)];
                case 10:
                    g$trade = _e.sent();
                    if (!g$trade) {
                        return [2 /*return*/, null];
                    }
                    trade = g$trade.trade;
                    (_a = realizedLPFeePriceImpact(g$trade.trade), priceImpact = _a.priceImpact, liquidityFee = _a.liquidityFee);
                    (outputAmount = g$trade.amount, minimumOutputAmount = g$trade.minAmount, route = g$trade.route);
                    return [3 /*break*/, 27];
                case 11: return [4 /*yield*/, calculateExitContribution(web3, inputAmount, account)];
                case 12:
                    contribution = _e.sent();
                    inputWithoutContribution = inputAmount.subtract(contribution);
                    if (!(TO.symbol === 'G$')) return [3 /*break*/, 13];
                    return [2 /*return*/, null];
                case 13:
                    if (!(TO.symbol === 'cDAI')) return [3 /*break*/, 15];
                    return [4 /*yield*/, G$ToCDai(web3, inputWithoutContribution, slippageTolerancePercent)];
                case 14:
                    (_b = _e.sent(), outputAmount = _b.amount, minimumOutputAmount = _b.minAmount);
                    DAIAmount = CurrencyAmount.fromRawAmount(DAI, 0);
                    cDAIAmount = minimumOutputAmount;
                    outputCDAIValue = outputAmount;
                    route = [CDAI[chainId]];
                    return [3 /*break*/, 24];
                case 15:
                    if (!(TO.symbol === 'DAI')) return [3 /*break*/, 19];
                    return [4 /*yield*/, G$ToCDai(web3, inputWithoutContribution, slippageTolerancePercent)];
                case 16:
                    (_c = _e.sent(), outputAmount = _c.amount, cDAIAmount = _c.minAmount);
                    outputCDAIValue = outputAmount;
                    return [4 /*yield*/, cDaiToDai(web3, cDAIAmount)];
                case 17:
                    minimumOutputAmount = DAIAmount = _e.sent();
                    return [4 /*yield*/, cDaiToDai(web3, outputAmount)];
                case 18:
                    outputAmount = _e.sent();
                    route = [DAI];
                    return [3 /*break*/, 24];
                case 19:
                    return [4 /*yield*/, G$ToCDai(web3, inputWithoutContribution, slippageTolerancePercent)];
                case 20:
                    (cDAIAmount = (_e.sent()).minAmount);
                    return [4 /*yield*/, cDaiToDai(web3, cDAIAmount)];
                case 21:
                    DAIAmount = _e.sent();
                    return [4 /*yield*/, DaiToXExactIn(web3, DAIAmount, TO, slippageTolerancePercent)];
                case 22:
                    daiTrade = _e.sent();
                    if (!daiTrade) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, daiToCDai(web3, DAIAmount.subtract(DAIAmount.multiply(daiTrade.trade.priceImpact)))];
                case 23:
                    //calcualte how much the output currency that we got, is worth in cDAI
                    outputCDAIValue = _e.sent();
                    trade = daiTrade.trade;
                    (_d = realizedLPFeePriceImpact(daiTrade.trade), priceImpact = _d.priceImpact, liquidityFee = _d.liquidityFee);
                    (outputAmount = daiTrade.amount, minimumOutputAmount = daiTrade.minAmount, route = daiTrade.route);
                    _e.label = 24;
                case 24: return [4 /*yield*/, g$ReservePrice(web3, chainId)];
                case 25:
                    price = (_e.sent()).cDAI;
                    priceImpact = computePriceImpact(price.invert(), inputWithoutContribution, outputCDAIValue);
                    return [4 /*yield*/, tokenBalance(web3, 'GDX', account)];
                case 26:
                    GDXBalance = _e.sent();
                    _e.label = 27;
                case 27:
                    return [2 /*return*/, {
                            inputAmount: inputAmount,
                            outputAmount: outputAmount,
                            minimumOutputAmount: minimumOutputAmount,
                            DAIAmount: DAIAmount,
                            cDAIAmount: cDAIAmount,
                            GDXAmount: inputAmount.lessThan(GDXBalance) ? inputAmount : GDXBalance,
                            priceImpact: priceImpact,
                            slippageTolerance: slippageTolerancePercent,
                            contribution: contribution,
                            liquidityFee: liquidityFee,
                            liquidityToken: DAI,
                            route: route,
                            trade: trade
                        }];
            }
        });
    });
}
/**
 * Returns trade information for selling G$ for exact token amount.
 * @param {Web3} web3 Web3 instance.
 * @param {string} toSymbol Symbol of the token that you want to get while selling G$.
 * @param {number | string} toAmount Amount of how much token want to receive.
 * @param {number} slippageTolerance Slippage tolerance while exchange tokens.
 */
function getMetaReverse$1(web3, toSymbol, toAmount, slippageTolerance) {
    if (slippageTolerance === void 0) { slippageTolerance = 0.5; }
    return __awaiter(this, void 0, void 0, function () {
        var chainId, G$, TO, DAI, inputAmount, result, amount, cDai, amount, dai, cDai, amount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getToken(chainId, 'G$')];
                case 2:
                    G$ = _a.sent();
                    if (!G$) {
                        throw new Error('Unsupported chain ID');
                    }
                    if (!(toSymbol === 'ETH')) return [3 /*break*/, 3];
                    TO = Ether.onChain(chainId);
                    return [3 /*break*/, 6];
                case 3:
                    if (!(toSymbol === 'FUSE')) return [3 /*break*/, 4];
                    TO = FUSE;
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, getToken(chainId, toSymbol)];
                case 5:
                    TO = (_a.sent());
                    _a.label = 6;
                case 6:
                    if (!TO) {
                        throw new Error('Unsupported token');
                    }
                    return [4 /*yield*/, getToken(chainId, 'DAI')];
                case 7:
                    DAI = (_a.sent());
                    inputAmount = CurrencyAmount.fromRawAmount(TO, decimalToJSBI(toAmount, TO.decimals));
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 9];
                    return [4 /*yield*/, G$ToXExactOut(web3, G$, inputAmount)];
                case 8:
                    result = _a.sent();
                    return [3 /*break*/, 20];
                case 9:
                    if (!(TO.symbol === 'G$')) return [3 /*break*/, 10];
                    result = null;
                    return [3 /*break*/, 20];
                case 10:
                    if (!(TO.symbol === 'cDAI')) return [3 /*break*/, 12];
                    return [4 /*yield*/, cDaiToG$(web3, inputAmount, ZERO_PERCENT)];
                case 11:
                    amount = (_a.sent()).amount;
                    result = amount;
                    return [3 /*break*/, 20];
                case 12:
                    if (!(TO.symbol === 'DAI')) return [3 /*break*/, 15];
                    return [4 /*yield*/, daiToCDai(web3, inputAmount)];
                case 13:
                    cDai = _a.sent();
                    return [4 /*yield*/, cDaiToG$(web3, cDai, ZERO_PERCENT)];
                case 14:
                    amount = (_a.sent()).amount;
                    result = amount;
                    return [3 /*break*/, 20];
                case 15: return [4 /*yield*/, DaiToXExactOut(web3, DAI, inputAmount)];
                case 16:
                    dai = _a.sent();
                    if (!!dai) return [3 /*break*/, 17];
                    result = null;
                    return [3 /*break*/, 20];
                case 17: return [4 /*yield*/, daiToCDai(web3, dai)];
                case 18:
                    cDai = _a.sent();
                    return [4 /*yield*/, cDaiToG$(web3, cDai, ZERO_PERCENT)];
                case 19:
                    amount = (_a.sent()).amount;
                    result = amount;
                    _a.label = 20;
                case 20:
                    if (!result) {
                        return [2 /*return*/, null];
                    }
                    return [2 /*return*/, getMeta$1(web3, toSymbol, result.toExact(), slippageTolerance)];
            }
        });
    });
}
/**
 * Pick necessary date from meta swap.
 * @param {BuyInfo} meta Result of the method getMeta() execution.
 * @returns {input: string, minReturn: string, minCDai: string}
 */
function prepareValues$1(meta) {
    if (!meta.route.length) {
        throw new InsufficientLiquidity();
    }
    var input = meta.inputAmount.multiply(meta.inputAmount.decimalScale).toFixed(0);
    var minReturn = meta.minimumOutputAmount.multiply(meta.minimumOutputAmount.decimalScale).toFixed(0);
    var minCDai = meta.cDAIAmount ? meta.cDAIAmount.multiply(meta.cDAIAmount.decimalScale).toFixed(0) : '0';
    debug({
        input: meta.inputAmount.toSignificant(6),
        minReturn: meta.minimumOutputAmount.toSignificant(6),
        minCDai: meta.cDAIAmount ? meta.cDAIAmount.toSignificant(6) : '0'
    });
    return { input: input, minReturn: minReturn, minCDai: minCDai };
}
/**
 * Approve token usage.
 * @param {Web3} web3 Web3 instance.
 * @param {BuyInfo} meta Result of the method getMeta() execution.
 */
function approve$1(web3, meta) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, input, bigInput, erc20, allowance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 3];
                    return [4 /*yield*/, approveSell(web3, meta.trade)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 3: return [4 /*yield*/, getAccount(web3)];
                case 4:
                    account = _a.sent();
                    input = prepareValues$1(meta).input;
                    bigInput = BigNumber.from(input);
                    erc20 = ERC20Contract(web3, G$[chainId].address);
                    return [4 /*yield*/, erc20.methods
                            .allowance(account, G$ContractAddresses(chainId, 'ExchangeHelper'))
                            .call()
                            .then(function (_) { return BigNumber.from(_); })];
                case 5:
                    allowance = _a.sent();
                    if (bigInput.lte(allowance))
                        return [2 /*return*/];
                    console.log(G$ContractAddresses(chainId, 'ExchangeHelper'));
                    return [4 /*yield*/, erc20.methods
                            .approve(G$ContractAddresses(chainId, 'ExchangeHelper'), MaxUint256.toString())
                            .send({ from: account })];
                case 6:
                    _a.sent();
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
/**
 * Swap tokens.
 * @param {Web3} web3 Web3 instance.
 * @param {BuyInfo} meta Result of the method getMeta() execution.
 * @param {Function} onSent On sent event listener.
 */
function sell(web3, meta, onSent) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account_1, contract, _a, input, minReturn, minCDai, route, req;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _b.sent();
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 2];
                    return [2 /*return*/, swap(web3, meta.trade, meta.slippageTolerance, onSent)];
                case 2: return [4 /*yield*/, getAccount(web3)];
                case 3:
                    account_1 = _b.sent();
                    return [4 /*yield*/, exchangeHelperContract(web3)];
                case 4:
                    contract = _b.sent();
                    _a = prepareValues$1(meta), input = _a.input, minReturn = _a.minReturn, minCDai = _a.minCDai;
                    route = meta.route.map(function (token) { return token.address; });
                    req = contract.methods
                        .sell(route, BigNumber.from(input), BigNumber.from(minCDai), BigNumber.from(minReturn), AddressZero)
                        .send({ from: account_1 });
                    if (onSent)
                        req.on('transactionHash', function (hash) { return onSent(hash, account_1); });
                    return [2 /*return*/, req];
            }
        });
    });
}

/**
 * Tries to convert token X into DAI. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency Token X currency amount instance.
 * @param {Percent} slippageTolerance Slippage tolerance.
 * @returns {DAIResult | null}
 */
function xToDaiExactIn(web3, currency, slippageTolerance) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, DAI, trade, amount, minAmount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getToken(chainId, 'DAI')];
                case 2:
                    DAI = (_a.sent());
                    debugGroup("".concat(currency.currency.symbol, " to DAI"));
                    return [4 /*yield*/, v2TradeExactIn(currency, DAI, { chainId: chainId })];
                case 3:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("".concat(currency.currency.symbol, " to DAI"));
                        return [2 /*return*/, null];
                    }
                    amount = trade.outputAmount;
                    debug('DAI', amount.toSignificant(6));
                    minAmount = trade.minimumAmountOut(slippageTolerance);
                    debug('DAI min', minAmount.toSignificant(6));
                    debugGroupEnd("".concat(currency.currency.symbol, " to DAI"));
                    return [2 /*return*/, { amount: amount, minAmount: minAmount, route: trade.route.path, trade: trade }];
            }
        });
    });
}
/**
 * Tries to get amount of token X from DAI. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {Currency} currency Token X currency amount instance.
 * @param {CurrencyAmount<Currency>} DAI Token DAI currency amount instance.
 * @returns {DAIResult | null}
 */
function xToDaiExactOut(web3, currency, DAI) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, trade;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    debugGroup("".concat(currency.symbol, " to DAI"));
                    return [4 /*yield*/, v2TradeExactOut(currency, DAI, { chainId: chainId })];
                case 2:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("".concat(currency.symbol, " to DAI"));
                        return [2 /*return*/, null];
                    }
                    debug(currency.symbol, trade.inputAmount.toSignificant(6));
                    debugGroupEnd("".concat(currency.symbol, " to DAI"));
                    return [2 /*return*/, trade.inputAmount];
            }
        });
    });
}
/**
 * Tries to convert token X into G$. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency Token X currency amount instance.
 * @param {Percent} slippageTolerance Slippage tolerance.
 * @returns {DAIResult | null}
 */
function xToG$ExactIn(web3, currency, slippageTolerance) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, G$, trade, amount, minAmount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getToken(chainId, 'G$')];
                case 2:
                    G$ = (_a.sent());
                    debugGroup("".concat(currency.currency.symbol, " to G$"));
                    return [4 /*yield*/, v2TradeExactIn(currency, G$, { chainId: chainId })];
                case 3:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("".concat(currency.currency.symbol, " to G$"));
                        return [2 /*return*/, null];
                    }
                    amount = trade.outputAmount;
                    debug('G$', amount.toSignificant(6));
                    minAmount = trade.minimumAmountOut(slippageTolerance);
                    debug('G$ min', minAmount.toSignificant(6));
                    debugGroupEnd("".concat(currency.currency.symbol, " to G$"));
                    return [2 /*return*/, { amount: amount, minAmount: minAmount, route: trade.route.path, trade: trade }];
            }
        });
    });
}
/**
 * Tries to get amount of token X from G$. If it impossible - returns null.
 * @param {Web3} web3 Web3 instance.
 * @param {Currency} currency Token X currency amount instance.
 * @param {CurrencyAmount<Currency>} G$ Token G$ currency amount instance.
 * @returns {DAIResult | null}
 */
function xToG$ExactOut(web3, currency, G$) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, trade;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    debugGroup("".concat(currency.symbol, " to G$"));
                    return [4 /*yield*/, v2TradeExactOut(currency, G$, { chainId: chainId })];
                case 2:
                    trade = _a.sent();
                    if (!trade) {
                        debugGroupEnd("".concat(currency.symbol, " to G$"));
                        return [2 /*return*/, null];
                    }
                    debug(currency.symbol, trade.inputAmount.toSignificant(6));
                    debugGroupEnd("".concat(currency.symbol, " to G$"));
                    return [2 /*return*/, trade.inputAmount];
            }
        });
    });
}
/**
 * Tries to convert token DAI into cDAI.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency DAI token amount.
 * @returns {CurrencyAmount<Currency>}
 * @throws {UnexpectedToken} If currency not DAI.
 */
function daiToCDai(web3, currency) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, cDaiPriceRatio, _cDaiOutput, amount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (currency.currency.symbol !== 'DAI') {
                        throw new UnexpectedToken(currency.currency.symbol);
                    }
                    return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, cDaiPrice(web3, chainId)];
                case 2:
                    cDaiPriceRatio = _a.sent();
                    debug('cDAI ratio', cDaiPriceRatio.toSignificant(6));
                    _cDaiOutput = currency.divide(cDaiPriceRatio).divide(1e10);
                    amount = CurrencyAmount.fromFractionalAmount(CDAI[chainId], _cDaiOutput.numerator, _cDaiOutput.denominator);
                    debug('cDAI', amount.toSignificant(6));
                    return [2 /*return*/, amount];
            }
        });
    });
}
/**
 * Tries to convert token cDAI into G$.
 * @param {Web3} web3 Web3 instance.
 * @param {CurrencyAmount<Currency>} currency CDAI token amount.
 * @param {Percent} slippageTolerance Slippage tolerance.
 * @returns {G$Result}
 * @throws {UnexpectedToken} If currency not cDAI.
 */
function cDaiToG$(web3, currency, slippageTolerance) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, goodMarketMaker, G$, bigNumber, _priceMinimumOutputAmount, amount, minAmount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (currency.currency.symbol !== 'cDAI') {
                        throw new UnexpectedToken(currency.currency.symbol);
                    }
                    return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, goodMarketMakerContract(web3)];
                case 2:
                    goodMarketMaker = _a.sent();
                    return [4 /*yield*/, getToken(chainId, 'G$')];
                case 3:
                    G$ = (_a.sent());
                    bigNumber = currency.multiply(currency.decimalScale).toFixed(0);
                    return [4 /*yield*/, goodMarketMaker.methods
                            .buyReturn(CDAI[chainId].address, bigNumber)
                            .call()];
                case 4:
                    _priceMinimumOutputAmount = (_a.sent());
                    amount = CurrencyAmount.fromRawAmount(G$, _priceMinimumOutputAmount.toString());
                    debug('G$', amount.toSignificant(6));
                    minAmount = amount.subtract(amount.multiply(slippageTolerance));
                    debug('G$ min', minAmount.toSignificant(6));
                    return [2 /*return*/, { amount: amount, minAmount: minAmount }];
            }
        });
    });
}
/**
 * Calculates liquidity fee.
 * @param {Trade<Currency, Currency, TradeType>} trade Currency amount.
 * @returns {Fraction}
 */
function getLiquidityFee(trade) {
    var realizedLpFeePercent = computeRealizedLPFeePercent(trade);
    debug('Liquidity fee', realizedLpFeePercent.toSignificant(6));
    var liquidityFee = trade.inputAmount.multiply(realizedLpFeePercent);
    return liquidityFee;
}
/**
 * Returns trade information for buying G$.
 * @param {Web3} web3 Web3 instance.
 * @param {string} fromSymbol Symbol of the token that you want to use to buy G$.
 * @param {number | string} amount Amount of given currency.
 * @param {number} slippageTolerance Slippage tolerance while exchange tokens.
 * @returns {Promise<BuyInfo | null>}
 */
function getMeta(web3, fromSymbol, amount, slippageTolerance) {
    if (slippageTolerance === void 0) { slippageTolerance = 0.5; }
    return __awaiter(this, void 0, void 0, function () {
        var chainId, G$, FROM, DAI, inputCDAIValue, DAIAmount, cDAIAmount, inputAmount, outputAmount, minimumOutputAmount, route, trade, liquidityFee, priceImpact, slippageTolerancePercent, g$trade, cDAI, DAI_1, g$trade, price;
        var _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _d.sent();
                    console.log('CHAIN ID:', chainId);
                    return [4 /*yield*/, getToken(chainId, 'G$')];
                case 2:
                    G$ = (_d.sent());
                    if (!G$) {
                        throw new UnsupportedChainId(chainId);
                    }
                    if (!(fromSymbol === 'ETH')) return [3 /*break*/, 3];
                    FROM = Ether.onChain(chainId);
                    return [3 /*break*/, 6];
                case 3:
                    if (!(fromSymbol === 'FUSE')) return [3 /*break*/, 4];
                    FROM = FUSE;
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, getToken(chainId, fromSymbol)];
                case 5:
                    FROM = (_d.sent());
                    _d.label = 6;
                case 6:
                    if (!FROM) {
                        throw new UnsupportedToken(fromSymbol);
                    }
                    return [4 /*yield*/, getToken(chainId, 'DAI')];
                case 7:
                    DAI = (_d.sent());
                    DAIAmount = null;
                    cDAIAmount = null;
                    trade = null;
                    liquidityFee = CurrencyAmount.fromRawAmount(FROM, '0');
                    priceImpact = new Fraction(0);
                    slippageTolerancePercent = decimalPercentToPercent(slippageTolerance);
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 9];
                    inputAmount = CurrencyAmount.fromRawAmount(FROM, decimalToJSBI(amount, FROM.decimals));
                    return [4 /*yield*/, xToG$ExactIn(web3, inputAmount, slippageTolerancePercent)];
                case 8:
                    g$trade = _d.sent();
                    if (!g$trade) {
                        return [2 /*return*/, null];
                    }
                    trade = g$trade.trade;
                    route = g$trade.route;
                    liquidityFee = getLiquidityFee(g$trade.trade);
                    outputAmount = g$trade.amount;
                    minimumOutputAmount = g$trade.minAmount;
                    priceImpact = g$trade.trade.priceImpact;
                    return [3 /*break*/, 23];
                case 9:
                    if (!(FROM.symbol === 'G$')) return [3 /*break*/, 10];
                    return [2 /*return*/, null];
                case 10:
                    if (!(FROM.symbol === 'cDAI')) return [3 /*break*/, 12];
                    cDAI = CDAI[chainId];
                    route = [cDAI];
                    inputAmount = CurrencyAmount.fromRawAmount(cDAI, decimalToJSBI(amount, cDAI.decimals));
                    DAIAmount = CurrencyAmount.fromRawAmount(DAI, 0);
                    inputCDAIValue = cDAIAmount = inputAmount;
                    return [4 /*yield*/, cDaiToG$(web3, inputAmount, slippageTolerancePercent)];
                case 11:
                    (_a = _d.sent(), outputAmount = _a.amount, minimumOutputAmount = _a.minAmount);
                    return [3 /*break*/, 21];
                case 12:
                    if (!(FROM.symbol === 'DAI')) return [3 /*break*/, 16];
                    return [4 /*yield*/, getToken(chainId, 'DAI')];
                case 13:
                    DAI_1 = (_d.sent());
                    route = [DAI_1];
                    inputAmount = CurrencyAmount.fromRawAmount(DAI_1, decimalToJSBI(amount, DAI_1.decimals));
                    DAIAmount = inputAmount;
                    return [4 /*yield*/, daiToCDai(web3, DAIAmount)];
                case 14:
                    inputCDAIValue = cDAIAmount = _d.sent();
                    return [4 /*yield*/, cDaiToG$(web3, cDAIAmount, slippageTolerancePercent)];
                case 15:
                    (_b = _d.sent(), outputAmount = _b.amount, minimumOutputAmount = _b.minAmount);
                    return [3 /*break*/, 21];
                case 16:
                    inputAmount = CurrencyAmount.fromRawAmount(FROM, decimalToJSBI(amount, FROM.decimals));
                    return [4 /*yield*/, xToDaiExactIn(web3, inputAmount, slippageTolerancePercent)];
                case 17:
                    g$trade = _d.sent();
                    if (!g$trade) {
                        return [2 /*return*/, null];
                    }
                    DAIAmount = g$trade.minAmount;
                    return [4 /*yield*/, daiToCDai(web3, DAIAmount)];
                case 18:
                    cDAIAmount = _d.sent();
                    return [4 /*yield*/, daiToCDai(web3, g$trade.amount.add(g$trade.amount.multiply(g$trade.trade.priceImpact)))];
                case 19:
                    inputCDAIValue = _d.sent();
                    route = g$trade.route;
                    liquidityFee = getLiquidityFee(g$trade.trade);
                    return [4 /*yield*/, Promise.all([
                            daiToCDai(web3, g$trade.amount).then(function (cDAI) { return cDaiToG$(web3, cDAI, ZERO_PERCENT); }),
                            cDaiToG$(web3, cDAIAmount, ZERO_PERCENT)
                        ])];
                case 20:
                    _c = __read.apply(void 0, [_d.sent(), 2]), outputAmount = _c[0].amount, minimumOutputAmount = _c[1].minAmount;
                    trade = g$trade.trade;
                    _d.label = 21;
                case 21: return [4 /*yield*/, g$ReservePrice(web3, chainId)];
                case 22:
                    price = (_d.sent()).cDAI;
                    priceImpact = computePriceImpact(price, inputCDAIValue, minimumOutputAmount);
                    _d.label = 23;
                case 23:
                    return [2 /*return*/, {
                            inputAmount: inputAmount,
                            outputAmount: outputAmount,
                            minimumOutputAmount: minimumOutputAmount,
                            DAIAmount: DAIAmount,
                            cDAIAmount: cDAIAmount,
                            GDXAmount: outputAmount,
                            priceImpact: priceImpact,
                            slippageTolerance: slippageTolerancePercent,
                            liquidityFee: liquidityFee,
                            liquidityToken: FROM,
                            route: route,
                            trade: trade
                        }];
            }
        });
    });
}
/**
 * Returns trade information for buying G$ for exact G$ amount.
 * @param {Web3} web3 Web3 instance.
 * @param {string} fromSymbol Symbol of the token that you want to use to buy G$.
 * @param {number | string} toAmount Amount of how much G$ want to receive.
 * @param {number} slippageTolerance Slippage tolerance while exchange tokens.
 * @returns {Promise<BuyInfo | null>}
 */
function getMetaReverse(web3, fromSymbol, toAmount, slippageTolerance) {
    if (slippageTolerance === void 0) { slippageTolerance = 0.5; }
    return __awaiter(this, void 0, void 0, function () {
        var chainId, G$, FROM, inputAmount, result, amount, amount, amount, dai;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    return [4 /*yield*/, getToken(chainId, 'G$')];
                case 2:
                    G$ = (_a.sent());
                    if (!G$) {
                        throw new UnsupportedChainId(chainId);
                    }
                    if (!(fromSymbol === 'ETH')) return [3 /*break*/, 3];
                    FROM = Ether.onChain(chainId);
                    return [3 /*break*/, 6];
                case 3:
                    if (!(fromSymbol === 'FUSE')) return [3 /*break*/, 4];
                    FROM = FUSE;
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, getToken(chainId, fromSymbol)];
                case 5:
                    FROM = (_a.sent());
                    _a.label = 6;
                case 6:
                    if (!FROM) {
                        throw new UnsupportedToken(fromSymbol);
                    }
                    inputAmount = CurrencyAmount.fromRawAmount(G$, decimalToJSBI(toAmount, G$.decimals));
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 8];
                    return [4 /*yield*/, xToG$ExactOut(web3, FROM, inputAmount)];
                case 7:
                    result = _a.sent();
                    return [3 /*break*/, 18];
                case 8:
                    if (!(FROM.symbol === 'G$')) return [3 /*break*/, 9];
                    result = null;
                    return [3 /*break*/, 18];
                case 9:
                    if (!(FROM.symbol === 'cDAI')) return [3 /*break*/, 11];
                    return [4 /*yield*/, G$ToCDai(web3, inputAmount, ZERO_PERCENT)];
                case 10:
                    amount = (_a.sent()).amount;
                    result = amount;
                    return [3 /*break*/, 18];
                case 11:
                    if (!(FROM.symbol === 'DAI')) return [3 /*break*/, 14];
                    return [4 /*yield*/, G$ToCDai(web3, inputAmount, ZERO_PERCENT)];
                case 12:
                    amount = (_a.sent()).amount;
                    return [4 /*yield*/, cDaiToDai(web3, amount)];
                case 13:
                    result = _a.sent();
                    return [3 /*break*/, 18];
                case 14: return [4 /*yield*/, G$ToCDai(web3, inputAmount, ZERO_PERCENT)];
                case 15:
                    amount = (_a.sent()).amount;
                    return [4 /*yield*/, cDaiToDai(web3, amount)];
                case 16:
                    dai = _a.sent();
                    return [4 /*yield*/, xToDaiExactOut(web3, FROM, dai)];
                case 17:
                    result = _a.sent();
                    _a.label = 18;
                case 18:
                    if (!result) {
                        return [2 /*return*/, null];
                    }
                    return [2 /*return*/, getMeta(web3, fromSymbol, result.toExact(), slippageTolerance)];
            }
        });
    });
}
/**
 * Pick necessary date from meta swap.
 * @param {BuyInfo} meta Result of the method getMeta() execution.
 * @returns {input: string, minReturn: string, minDai: string}
 */
function prepareValues(meta) {
    if (!meta.route.length) {
        throw new InsufficientLiquidity();
    }
    var input = meta.inputAmount.multiply(meta.inputAmount.decimalScale).toFixed(0);
    var minReturn = meta.minimumOutputAmount.multiply(meta.minimumOutputAmount.decimalScale).toFixed(0);
    var minDai = meta.DAIAmount ? meta.DAIAmount.multiply(meta.DAIAmount.decimalScale).toFixed(0) : '0';
    debug({
        input: meta.inputAmount.toSignificant(6),
        minReturn: meta.minimumOutputAmount.toSignificant(6),
        minDai: meta.DAIAmount ? meta.DAIAmount.toSignificant(6) : '0'
    });
    return { input: input, minReturn: minReturn, minDai: minDai };
}
/**
 * Approve token usage.
 * @param {Web3} web3 Web3 instance.
 * @param {BuyInfo} meta Result of the method getMeta() execution.
 */
function approve(web3, meta) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, input, bigInput, erc20, allowance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _a.sent();
                    if (!(meta.trade && meta.trade.inputAmount.currency.isNative)) return [3 /*break*/, 2];
                    return [2 /*return*/];
                case 2:
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 4];
                    return [4 /*yield*/, approveBuy(web3, meta.trade)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 4: return [4 /*yield*/, getAccount(web3)];
                case 5:
                    account = _a.sent();
                    input = prepareValues(meta).input;
                    bigInput = BigNumber.from(input);
                    erc20 = ERC20Contract(web3, meta.route[0].address);
                    return [4 /*yield*/, erc20.methods
                            .allowance(account, G$ContractAddresses(chainId, 'ExchangeHelper'))
                            .call()
                            .then(function (_) { return BigNumber.from(_); })];
                case 6:
                    allowance = _a.sent();
                    if (bigInput.lte(allowance))
                        return [2 /*return*/];
                    return [4 /*yield*/, erc20.methods
                            .approve(G$ContractAddresses(chainId, 'ExchangeHelper'), MaxUint256.toString())
                            .send({ from: account })];
                case 7:
                    _a.sent();
                    _a.label = 8;
                case 8: return [2 /*return*/];
            }
        });
    });
}
/**
 * Swap tokens.
 * @param {Web3} web3 Web3 instance.
 * @param {BuyInfo} meta Result of the method getMeta() execution.
 * @param {Function} onSent On sent event listener.
 */
function buy(web3, meta, onSent) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, account, contract, _a, input, minReturn, minDai, route, req;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getChainId(web3)];
                case 1:
                    chainId = _b.sent();
                    return [4 /*yield*/, getAccount(web3)];
                case 2:
                    account = _b.sent();
                    if (!(chainId === SupportedChainId.FUSE)) return [3 /*break*/, 3];
                    return [2 /*return*/, swap(web3, meta.trade, meta.slippageTolerance, onSent)];
                case 3: return [4 /*yield*/, exchangeHelperContract(web3)];
                case 4:
                    contract = _b.sent();
                    _a = prepareValues(meta), input = _a.input, minReturn = _a.minReturn, minDai = _a.minDai;
                    route = void 0;
                    // If ETH - change route a little bit to start from a zero address
                    if (meta.trade && meta.trade.inputAmount.currency.isNative) {
                        // Convert into an array of addresses
                        route = __spreadArray([AddressZero], __read(meta.route.slice(1).map(function (token) { return token.address; })), false);
                    }
                    else {
                        // Otherwise keep as if, convert into an addresses
                        route = meta.route.map(function (token) { return token.address; });
                    }
                    req = contract.methods
                        .buy(route, BigNumber.from(input), BigNumber.from(minReturn), BigNumber.from(minDai), AddressZero)
                        .send({
                        from: account,
                        value: route[0] === AddressZero ? input : undefined
                    });
                    if (onSent)
                        req.on('transactionHash', function (hash) { return onSent(hash, account); });
                    return [2 /*return*/, req];
            }
        });
    });
}

/**
 * Return list of tokens based on current chain ID.
 * @param {string | number} chainId Web3 instance.
 * @returns {Currency[]}
 */
function getList(chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, tokens;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getTokens(chainId)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 1]), tokens = _a[0];
                    return [2 /*return*/, Array.from(tokens.values()).filter(function (token) { return token.name && token.symbol && !['G$', 'GDX', 'GDAO'].includes(token.symbol); })];
            }
        });
    });
}

export { claim as a, approve as b, check as c, buy as d, getMetaReverse as e, approve$1 as f, getMeta as g, getMeta$1 as h, isWhitelisted as i, getMetaReverse$1 as j, getList as k, sell as s };
